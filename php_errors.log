[29-Sep-2022 17:04:01 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:04:01 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:04:01 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcs:0
[29-Sep-2022 17:04:01 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcs:120
[29-Sep-2022 17:04:01 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCS() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcs:18
[29-Sep-2022 17:04:01 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->init() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:70
[29-Sep-2022 17:04:01 Europe/Paris] PHP   5. PHP_CodeSniffer\Ruleset->__construct($config = class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 75, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => TRUE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = TRUE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:332
[29-Sep-2022 17:04:01 Europe/Paris] PHP   6. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:218
[29-Sep-2022 17:04:01 Europe/Paris] PHP   7. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:04:01 Europe/Paris] PHP   8. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'function abc(...);') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:04:01 Europe/Paris] PHP   9. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:04:01 Europe/Paris] PHP  10. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:04:01 Europe/Paris] PHP  11. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:04:01 Europe/Paris] PHP  12. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:04:01 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:04:01 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:04:01 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcs:0
[29-Sep-2022 17:04:01 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcs:120
[29-Sep-2022 17:04:01 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCS() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcs:18
[29-Sep-2022 17:04:01 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->init() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:70
[29-Sep-2022 17:04:01 Europe/Paris] PHP   5. PHP_CodeSniffer\Ruleset->__construct($config = class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 75, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => TRUE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = TRUE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:332
[29-Sep-2022 17:04:01 Europe/Paris] PHP   6. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:218
[29-Sep-2022 17:04:01 Europe/Paris] PHP   7. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:04:01 Europe/Paris] PHP   8. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'function abc(...)') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:04:01 Europe/Paris] PHP   9. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:04:01 Europe/Paris] PHP  10. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:04:01 Europe/Paris] PHP  11. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:04:01 Europe/Paris] PHP  12. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:04:01 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:04:01 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:04:01 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcs:0
[29-Sep-2022 17:04:01 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcs:120
[29-Sep-2022 17:04:01 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCS() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcs:18
[29-Sep-2022 17:04:01 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->init() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:70
[29-Sep-2022 17:04:01 Europe/Paris] PHP   5. PHP_CodeSniffer\Ruleset->__construct($config = class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 75, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => TRUE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = TRUE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:332
[29-Sep-2022 17:04:01 Europe/Paris] PHP   6. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:218
[29-Sep-2022 17:04:02 Europe/Paris] PHP   7. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:04:02 Europe/Paris] PHP   8. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'abstract function abc(...);') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:04:02 Europe/Paris] PHP   9. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:04:02 Europe/Paris] PHP  10. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:04:02 Europe/Paris] PHP  11. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:04:02 Europe/Paris] PHP  12. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:04:10 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:04:10 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:04:10 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcbf:0
[29-Sep-2022 17:04:10 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcbf:120
[29-Sep-2022 17:04:10 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCBF() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcbf:18
[29-Sep-2022 17:04:10 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->init() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:176
[29-Sep-2022 17:04:10 Europe/Paris] PHP   5. PHP_CodeSniffer\Ruleset->__construct($config = class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 75, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => TRUE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = TRUE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:332
[29-Sep-2022 17:04:10 Europe/Paris] PHP   6. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:218
[29-Sep-2022 17:04:10 Europe/Paris] PHP   7. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:04:10 Europe/Paris] PHP   8. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'function abc(...);') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:04:10 Europe/Paris] PHP   9. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:04:10 Europe/Paris] PHP  10. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:04:10 Europe/Paris] PHP  11. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:04:10 Europe/Paris] PHP  12. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:04:10 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:04:10 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:04:10 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcbf:0
[29-Sep-2022 17:04:10 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcbf:120
[29-Sep-2022 17:04:10 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCBF() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcbf:18
[29-Sep-2022 17:04:10 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->init() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:176
[29-Sep-2022 17:04:10 Europe/Paris] PHP   5. PHP_CodeSniffer\Ruleset->__construct($config = class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 75, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => TRUE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = TRUE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:332
[29-Sep-2022 17:04:10 Europe/Paris] PHP   6. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:218
[29-Sep-2022 17:04:10 Europe/Paris] PHP   7. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:04:10 Europe/Paris] PHP   8. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'function abc(...)') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:04:10 Europe/Paris] PHP   9. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:04:10 Europe/Paris] PHP  10. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:04:10 Europe/Paris] PHP  11. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:04:10 Europe/Paris] PHP  12. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:04:10 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:04:10 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:04:10 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcbf:0
[29-Sep-2022 17:04:10 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcbf:120
[29-Sep-2022 17:04:10 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCBF() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcbf:18
[29-Sep-2022 17:04:10 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->init() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:176
[29-Sep-2022 17:04:10 Europe/Paris] PHP   5. PHP_CodeSniffer\Ruleset->__construct($config = class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 75, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => TRUE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = TRUE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:332
[29-Sep-2022 17:04:10 Europe/Paris] PHP   6. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:218
[29-Sep-2022 17:04:10 Europe/Paris] PHP   7. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:04:10 Europe/Paris] PHP   8. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'abstract function abc(...);') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:04:10 Europe/Paris] PHP   9. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:04:10 Europe/Paris] PHP  10. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:04:10 Europe/Paris] PHP  11. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:04:10 Europe/Paris] PHP  12. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:04:10 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:04:10 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:04:10 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcbf:0
[29-Sep-2022 17:04:10 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcbf:120
[29-Sep-2022 17:04:10 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCBF() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcbf:18
[29-Sep-2022 17:04:10 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->run() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:200
[29-Sep-2022 17:04:10 Europe/Paris] PHP   5. PHP_CodeSniffer\Runner->processFile($file = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\src\\Option.php'; protected $content = '<?php\r\ndeclare(strict_types=1);\r\n/**\r\n * User: Fabien Sanchez\r\n * Date: 19/12/2018\r\n * Time: 15:41\r\n */\r\n\r\nnamespace Console\\Options;\r\n\r\nclass Option\r\n{\r\n    /**\r\n     * Type d\'option\r\n     */\r\n    const T_FLAG = 1;\r\n    const T_INTEGER = 2;\r\n    const T_DOUBLE = 16;\r\n    const T_STRING = 4;\r\n    const T_PATH = 8;\r\n    /**\r\n     * nom long de l\'option\r\n     * @var string\r\n     */\r\n    private $name;\r\n    /**\r\n     * nom court de l\'option\r\n     * @var string|null\r\n     */\r\n    private $shortname;\r\n    /**\r\n '...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 1371; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 1371; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Constant name case' => [...], 'PHP constant case' => [...], 'Function opening brace placement' => [...], 'CamelCase method name' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'Use of ELSE IF or ELSEIF' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Constant name case' => [...], 'PHP constant case' => [...], 'Function opening brace placement' => [...], 'CamelCase method name' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'Use of ELSE IF or ELSEIF' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:434
[29-Sep-2022 17:04:10 Europe/Paris] PHP   6. PHP_CodeSniffer\Reporter->cacheFileReport($phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\src\\Option.php'; protected $content = '<?php\r\ndeclare(strict_types=1);\r\n/**\r\n * User: Fabien Sanchez\r\n * Date: 19/12/2018\r\n * Time: 15:41\r\n */\r\n\r\nnamespace Console\\Options;\r\n\r\nclass Option\r\n{\r\n    /**\r\n     * Type d\'option\r\n     */\r\n    const T_FLAG = 1;\r\n    const T_INTEGER = 2;\r\n    const T_DOUBLE = 16;\r\n    const T_STRING = 4;\r\n    const T_PATH = 8;\r\n    /**\r\n     * nom long de l\'option\r\n     * @var string\r\n     */\r\n    private $name;\r\n    /**\r\n     * nom court de l\'option\r\n     * @var string|null\r\n     */\r\n    private $shortname;\r\n    /**\r\n '...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 1371; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 1371; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Constant name case' => [...], 'PHP constant case' => [...], 'Function opening brace placement' => [...], 'CamelCase method name' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'Use of ELSE IF or ELSEIF' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Constant name case' => [...], 'PHP constant case' => [...], 'Function opening brace placement' => [...], 'CamelCase method name' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'Use of ELSE IF or ELSEIF' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 1, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = FALSE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:654
[29-Sep-2022 17:04:10 Europe/Paris] PHP   7. PHP_CodeSniffer\Reports\Cbf->generateFileReport($report = ['filename' => 'D:\\work-dir\\console-options\\src\\Option.php', 'errors' => 1, 'warnings' => 0, 'fixable' => 1, 'messages' => [1 => [...]]], $phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\src\\Option.php'; protected $content = '<?php\r\ndeclare(strict_types=1);\r\n/**\r\n * User: Fabien Sanchez\r\n * Date: 19/12/2018\r\n * Time: 15:41\r\n */\r\n\r\nnamespace Console\\Options;\r\n\r\nclass Option\r\n{\r\n    /**\r\n     * Type d\'option\r\n     */\r\n    const T_FLAG = 1;\r\n    const T_INTEGER = 2;\r\n    const T_DOUBLE = 16;\r\n    const T_STRING = 4;\r\n    const T_PATH = 8;\r\n    /**\r\n     * nom long de l\'option\r\n     * @var string\r\n     */\r\n    private $name;\r\n    /**\r\n     * nom court de l\'option\r\n     * @var string|null\r\n     */\r\n    private $shortname;\r\n    /**\r\n '...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 1371; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 1371; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Constant name case' => [...], 'PHP constant case' => [...], 'Function opening brace placement' => [...], 'CamelCase method name' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'Use of ELSE IF or ELSEIF' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Constant name case' => [...], 'PHP constant case' => [...], 'Function opening brace placement' => [...], 'CamelCase method name' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'Use of ELSE IF or ELSEIF' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, $showSources = FALSE, $width = 0) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reporter.php:285
[29-Sep-2022 17:04:10 Europe/Paris] PHP   8. PHP_CodeSniffer\Fixer->fixFile() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reports\Cbf.php:52
[29-Sep-2022 17:04:10 Europe/Paris] PHP   9. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Fixer.php:172
[29-Sep-2022 17:04:10 Europe/Paris] PHP  10. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:04:10 Europe/Paris] PHP  11. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'function abc(...);') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:04:10 Europe/Paris] PHP  12. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:04:10 Europe/Paris] PHP  13. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:04:10 Europe/Paris] PHP  14. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:04:10 Europe/Paris] PHP  15. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:04:10 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:04:10 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:04:10 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcbf:0
[29-Sep-2022 17:04:10 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcbf:120
[29-Sep-2022 17:04:10 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCBF() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcbf:18
[29-Sep-2022 17:04:10 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->run() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:200
[29-Sep-2022 17:04:10 Europe/Paris] PHP   5. PHP_CodeSniffer\Runner->processFile($file = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\src\\Option.php'; protected $content = '<?php\r\ndeclare(strict_types=1);\r\n/**\r\n * User: Fabien Sanchez\r\n * Date: 19/12/2018\r\n * Time: 15:41\r\n */\r\n\r\nnamespace Console\\Options;\r\n\r\nclass Option\r\n{\r\n    /**\r\n     * Type d\'option\r\n     */\r\n    const T_FLAG = 1;\r\n    const T_INTEGER = 2;\r\n    const T_DOUBLE = 16;\r\n    const T_STRING = 4;\r\n    const T_PATH = 8;\r\n    /**\r\n     * nom long de l\'option\r\n     * @var string\r\n     */\r\n    private $name;\r\n    /**\r\n     * nom court de l\'option\r\n     * @var string|null\r\n     */\r\n    private $shortname;\r\n    /**\r\n '...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 1371; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 1371; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Constant name case' => [...], 'PHP constant case' => [...], 'Function opening brace placement' => [...], 'CamelCase method name' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'Use of ELSE IF or ELSEIF' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Constant name case' => [...], 'PHP constant case' => [...], 'Function opening brace placement' => [...], 'CamelCase method name' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'Use of ELSE IF or ELSEIF' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:434
[29-Sep-2022 17:04:10 Europe/Paris] PHP   6. PHP_CodeSniffer\Reporter->cacheFileReport($phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\src\\Option.php'; protected $content = '<?php\r\ndeclare(strict_types=1);\r\n/**\r\n * User: Fabien Sanchez\r\n * Date: 19/12/2018\r\n * Time: 15:41\r\n */\r\n\r\nnamespace Console\\Options;\r\n\r\nclass Option\r\n{\r\n    /**\r\n     * Type d\'option\r\n     */\r\n    const T_FLAG = 1;\r\n    const T_INTEGER = 2;\r\n    const T_DOUBLE = 16;\r\n    const T_STRING = 4;\r\n    const T_PATH = 8;\r\n    /**\r\n     * nom long de l\'option\r\n     * @var string\r\n     */\r\n    private $name;\r\n    /**\r\n     * nom court de l\'option\r\n     * @var string|null\r\n     */\r\n    private $shortname;\r\n    /**\r\n '...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 1371; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 1371; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Constant name case' => [...], 'PHP constant case' => [...], 'Function opening brace placement' => [...], 'CamelCase method name' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'Use of ELSE IF or ELSEIF' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Constant name case' => [...], 'PHP constant case' => [...], 'Function opening brace placement' => [...], 'CamelCase method name' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'Use of ELSE IF or ELSEIF' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 1, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = FALSE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:654
[29-Sep-2022 17:04:10 Europe/Paris] PHP   7. PHP_CodeSniffer\Reports\Cbf->generateFileReport($report = ['filename' => 'D:\\work-dir\\console-options\\src\\Option.php', 'errors' => 1, 'warnings' => 0, 'fixable' => 1, 'messages' => [1 => [...]]], $phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\src\\Option.php'; protected $content = '<?php\r\ndeclare(strict_types=1);\r\n/**\r\n * User: Fabien Sanchez\r\n * Date: 19/12/2018\r\n * Time: 15:41\r\n */\r\n\r\nnamespace Console\\Options;\r\n\r\nclass Option\r\n{\r\n    /**\r\n     * Type d\'option\r\n     */\r\n    const T_FLAG = 1;\r\n    const T_INTEGER = 2;\r\n    const T_DOUBLE = 16;\r\n    const T_STRING = 4;\r\n    const T_PATH = 8;\r\n    /**\r\n     * nom long de l\'option\r\n     * @var string\r\n     */\r\n    private $name;\r\n    /**\r\n     * nom court de l\'option\r\n     * @var string|null\r\n     */\r\n    private $shortname;\r\n    /**\r\n '...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 1371; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 1371; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Constant name case' => [...], 'PHP constant case' => [...], 'Function opening brace placement' => [...], 'CamelCase method name' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'Use of ELSE IF or ELSEIF' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Constant name case' => [...], 'PHP constant case' => [...], 'Function opening brace placement' => [...], 'CamelCase method name' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'Use of ELSE IF or ELSEIF' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, $showSources = FALSE, $width = 0) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reporter.php:285
[29-Sep-2022 17:04:10 Europe/Paris] PHP   8. PHP_CodeSniffer\Fixer->fixFile() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reports\Cbf.php:52
[29-Sep-2022 17:04:10 Europe/Paris] PHP   9. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Fixer.php:172
[29-Sep-2022 17:04:10 Europe/Paris] PHP  10. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:04:10 Europe/Paris] PHP  11. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'function abc(...)') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:04:10 Europe/Paris] PHP  12. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:04:10 Europe/Paris] PHP  13. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:04:10 Europe/Paris] PHP  14. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:04:10 Europe/Paris] PHP  15. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:04:10 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:04:10 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:04:10 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcbf:0
[29-Sep-2022 17:04:10 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcbf:120
[29-Sep-2022 17:04:10 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCBF() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcbf:18
[29-Sep-2022 17:04:10 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->run() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:200
[29-Sep-2022 17:04:10 Europe/Paris] PHP   5. PHP_CodeSniffer\Runner->processFile($file = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\src\\Option.php'; protected $content = '<?php\r\ndeclare(strict_types=1);\r\n/**\r\n * User: Fabien Sanchez\r\n * Date: 19/12/2018\r\n * Time: 15:41\r\n */\r\n\r\nnamespace Console\\Options;\r\n\r\nclass Option\r\n{\r\n    /**\r\n     * Type d\'option\r\n     */\r\n    const T_FLAG = 1;\r\n    const T_INTEGER = 2;\r\n    const T_DOUBLE = 16;\r\n    const T_STRING = 4;\r\n    const T_PATH = 8;\r\n    /**\r\n     * nom long de l\'option\r\n     * @var string\r\n     */\r\n    private $name;\r\n    /**\r\n     * nom court de l\'option\r\n     * @var string|null\r\n     */\r\n    private $shortname;\r\n    /**\r\n '...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 1371; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 1371; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Constant name case' => [...], 'PHP constant case' => [...], 'Function opening brace placement' => [...], 'CamelCase method name' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'Use of ELSE IF or ELSEIF' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Constant name case' => [...], 'PHP constant case' => [...], 'Function opening brace placement' => [...], 'CamelCase method name' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'Use of ELSE IF or ELSEIF' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:434
[29-Sep-2022 17:04:10 Europe/Paris] PHP   6. PHP_CodeSniffer\Reporter->cacheFileReport($phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\src\\Option.php'; protected $content = '<?php\r\ndeclare(strict_types=1);\r\n/**\r\n * User: Fabien Sanchez\r\n * Date: 19/12/2018\r\n * Time: 15:41\r\n */\r\n\r\nnamespace Console\\Options;\r\n\r\nclass Option\r\n{\r\n    /**\r\n     * Type d\'option\r\n     */\r\n    const T_FLAG = 1;\r\n    const T_INTEGER = 2;\r\n    const T_DOUBLE = 16;\r\n    const T_STRING = 4;\r\n    const T_PATH = 8;\r\n    /**\r\n     * nom long de l\'option\r\n     * @var string\r\n     */\r\n    private $name;\r\n    /**\r\n     * nom court de l\'option\r\n     * @var string|null\r\n     */\r\n    private $shortname;\r\n    /**\r\n '...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 1371; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 1371; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Constant name case' => [...], 'PHP constant case' => [...], 'Function opening brace placement' => [...], 'CamelCase method name' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'Use of ELSE IF or ELSEIF' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Constant name case' => [...], 'PHP constant case' => [...], 'Function opening brace placement' => [...], 'CamelCase method name' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'Use of ELSE IF or ELSEIF' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 1, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = FALSE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:654
[29-Sep-2022 17:04:10 Europe/Paris] PHP   7. PHP_CodeSniffer\Reports\Cbf->generateFileReport($report = ['filename' => 'D:\\work-dir\\console-options\\src\\Option.php', 'errors' => 1, 'warnings' => 0, 'fixable' => 1, 'messages' => [1 => [...]]], $phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\src\\Option.php'; protected $content = '<?php\r\ndeclare(strict_types=1);\r\n/**\r\n * User: Fabien Sanchez\r\n * Date: 19/12/2018\r\n * Time: 15:41\r\n */\r\n\r\nnamespace Console\\Options;\r\n\r\nclass Option\r\n{\r\n    /**\r\n     * Type d\'option\r\n     */\r\n    const T_FLAG = 1;\r\n    const T_INTEGER = 2;\r\n    const T_DOUBLE = 16;\r\n    const T_STRING = 4;\r\n    const T_PATH = 8;\r\n    /**\r\n     * nom long de l\'option\r\n     * @var string\r\n     */\r\n    private $name;\r\n    /**\r\n     * nom court de l\'option\r\n     * @var string|null\r\n     */\r\n    private $shortname;\r\n    /**\r\n '...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 1371; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 1371; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Constant name case' => [...], 'PHP constant case' => [...], 'Function opening brace placement' => [...], 'CamelCase method name' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'Use of ELSE IF or ELSEIF' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Constant name case' => [...], 'PHP constant case' => [...], 'Function opening brace placement' => [...], 'CamelCase method name' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'Use of ELSE IF or ELSEIF' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, $showSources = FALSE, $width = 0) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reporter.php:285
[29-Sep-2022 17:04:10 Europe/Paris] PHP   8. PHP_CodeSniffer\Fixer->fixFile() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reports\Cbf.php:52
[29-Sep-2022 17:04:10 Europe/Paris] PHP   9. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Fixer.php:172
[29-Sep-2022 17:04:10 Europe/Paris] PHP  10. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:04:10 Europe/Paris] PHP  11. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'abstract function abc(...);') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:04:10 Europe/Paris] PHP  12. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:04:10 Europe/Paris] PHP  13. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:04:10 Europe/Paris] PHP  14. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:04:10 Europe/Paris] PHP  15. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:04:10 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:04:10 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:04:10 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcbf:0
[29-Sep-2022 17:04:10 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcbf:120
[29-Sep-2022 17:04:10 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCBF() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcbf:18
[29-Sep-2022 17:04:10 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->run() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:200
[29-Sep-2022 17:04:10 Europe/Paris] PHP   5. PHP_CodeSniffer\Runner->processFile($file = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\src\\Option.php'; protected $content = '<?php\r\ndeclare(strict_types=1);\r\n/**\r\n * User: Fabien Sanchez\r\n * Date: 19/12/2018\r\n * Time: 15:41\r\n */\r\n\r\nnamespace Console\\Options;\r\n\r\nclass Option\r\n{\r\n    /**\r\n     * Type d\'option\r\n     */\r\n    const T_FLAG = 1;\r\n    const T_INTEGER = 2;\r\n    const T_DOUBLE = 16;\r\n    const T_STRING = 4;\r\n    const T_PATH = 8;\r\n    /**\r\n     * nom long de l\'option\r\n     * @var string\r\n     */\r\n    private $name;\r\n    /**\r\n     * nom court de l\'option\r\n     * @var string|null\r\n     */\r\n    private $shortname;\r\n    /**\r\n '...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 231 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 1371; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 1371; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Constant name case' => [...], 'PHP constant case' => [...], 'Function opening brace placement' => [...], 'CamelCase method name' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'Use of ELSE IF or ELSEIF' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Constant name case' => [...], 'PHP constant case' => [...], 'Function opening brace placement' => [...], 'CamelCase method name' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'Use of ELSE IF or ELSEIF' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 231; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:434
[29-Sep-2022 17:04:10 Europe/Paris] PHP   6. PHP_CodeSniffer\Reporter->cacheFileReport($phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\src\\Option.php'; protected $content = '<?php\r\ndeclare(strict_types=1);\r\n/**\r\n * User: Fabien Sanchez\r\n * Date: 19/12/2018\r\n * Time: 15:41\r\n */\r\n\r\nnamespace Console\\Options;\r\n\r\nclass Option\r\n{\r\n    /**\r\n     * Type d\'option\r\n     */\r\n    const T_FLAG = 1;\r\n    const T_INTEGER = 2;\r\n    const T_DOUBLE = 16;\r\n    const T_STRING = 4;\r\n    const T_PATH = 8;\r\n    /**\r\n     * nom long de l\'option\r\n     * @var string\r\n     */\r\n    private $name;\r\n    /**\r\n     * nom court de l\'option\r\n     * @var string|null\r\n     */\r\n    private $shortname;\r\n    /**\r\n '...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 231 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 1371; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 1371; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Constant name case' => [...], 'PHP constant case' => [...], 'Function opening brace placement' => [...], 'CamelCase method name' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'Use of ELSE IF or ELSEIF' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Constant name case' => [...], 'PHP constant case' => [...], 'Function opening brace placement' => [...], 'CamelCase method name' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'Use of ELSE IF or ELSEIF' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 231; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 1, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = FALSE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:654
[29-Sep-2022 17:04:10 Europe/Paris] PHP   7. PHP_CodeSniffer\Reports\Cbf->generateFileReport($report = ['filename' => 'D:\\work-dir\\console-options\\src\\Option.php', 'errors' => 1, 'warnings' => 0, 'fixable' => 1, 'messages' => [1 => [...]]], $phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\src\\Option.php'; protected $content = '<?php\r\ndeclare(strict_types=1);\r\n/**\r\n * User: Fabien Sanchez\r\n * Date: 19/12/2018\r\n * Time: 15:41\r\n */\r\n\r\nnamespace Console\\Options;\r\n\r\nclass Option\r\n{\r\n    /**\r\n     * Type d\'option\r\n     */\r\n    const T_FLAG = 1;\r\n    const T_INTEGER = 2;\r\n    const T_DOUBLE = 16;\r\n    const T_STRING = 4;\r\n    const T_PATH = 8;\r\n    /**\r\n     * nom long de l\'option\r\n     * @var string\r\n     */\r\n    private $name;\r\n    /**\r\n     * nom court de l\'option\r\n     * @var string|null\r\n     */\r\n    private $shortname;\r\n    /**\r\n '...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 231 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 1371; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 1371; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Constant name case' => [...], 'PHP constant case' => [...], 'Function opening brace placement' => [...], 'CamelCase method name' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'Use of ELSE IF or ELSEIF' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Constant name case' => [...], 'PHP constant case' => [...], 'Function opening brace placement' => [...], 'CamelCase method name' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'Use of ELSE IF or ELSEIF' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 231; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, $showSources = FALSE, $width = 0) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reporter.php:285
[29-Sep-2022 17:04:10 Europe/Paris] PHP   8. PHP_CodeSniffer\Fixer->fixFile() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reports\Cbf.php:52
[29-Sep-2022 17:04:10 Europe/Paris] PHP   9. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Fixer.php:172
[29-Sep-2022 17:04:10 Europe/Paris] PHP  10. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:04:10 Europe/Paris] PHP  11. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'function abc(...);') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:04:10 Europe/Paris] PHP  12. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:04:10 Europe/Paris] PHP  13. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:04:10 Europe/Paris] PHP  14. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:04:10 Europe/Paris] PHP  15. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:04:10 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:04:10 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:04:10 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcbf:0
[29-Sep-2022 17:04:10 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcbf:120
[29-Sep-2022 17:04:10 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCBF() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcbf:18
[29-Sep-2022 17:04:10 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->run() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:200
[29-Sep-2022 17:04:10 Europe/Paris] PHP   5. PHP_CodeSniffer\Runner->processFile($file = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\src\\Option.php'; protected $content = '<?php\r\ndeclare(strict_types=1);\r\n/**\r\n * User: Fabien Sanchez\r\n * Date: 19/12/2018\r\n * Time: 15:41\r\n */\r\n\r\nnamespace Console\\Options;\r\n\r\nclass Option\r\n{\r\n    /**\r\n     * Type d\'option\r\n     */\r\n    const T_FLAG = 1;\r\n    const T_INTEGER = 2;\r\n    const T_DOUBLE = 16;\r\n    const T_STRING = 4;\r\n    const T_PATH = 8;\r\n    /**\r\n     * nom long de l\'option\r\n     * @var string\r\n     */\r\n    private $name;\r\n    /**\r\n     * nom court de l\'option\r\n     * @var string|null\r\n     */\r\n    private $shortname;\r\n    /**\r\n '...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 231 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 1371; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 1371; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Constant name case' => [...], 'PHP constant case' => [...], 'Function opening brace placement' => [...], 'CamelCase method name' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'Use of ELSE IF or ELSEIF' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Constant name case' => [...], 'PHP constant case' => [...], 'Function opening brace placement' => [...], 'CamelCase method name' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'Use of ELSE IF or ELSEIF' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 231; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:434
[29-Sep-2022 17:04:10 Europe/Paris] PHP   6. PHP_CodeSniffer\Reporter->cacheFileReport($phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\src\\Option.php'; protected $content = '<?php\r\ndeclare(strict_types=1);\r\n/**\r\n * User: Fabien Sanchez\r\n * Date: 19/12/2018\r\n * Time: 15:41\r\n */\r\n\r\nnamespace Console\\Options;\r\n\r\nclass Option\r\n{\r\n    /**\r\n     * Type d\'option\r\n     */\r\n    const T_FLAG = 1;\r\n    const T_INTEGER = 2;\r\n    const T_DOUBLE = 16;\r\n    const T_STRING = 4;\r\n    const T_PATH = 8;\r\n    /**\r\n     * nom long de l\'option\r\n     * @var string\r\n     */\r\n    private $name;\r\n    /**\r\n     * nom court de l\'option\r\n     * @var string|null\r\n     */\r\n    private $shortname;\r\n    /**\r\n '...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 231 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 1371; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 1371; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Constant name case' => [...], 'PHP constant case' => [...], 'Function opening brace placement' => [...], 'CamelCase method name' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'Use of ELSE IF or ELSEIF' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Constant name case' => [...], 'PHP constant case' => [...], 'Function opening brace placement' => [...], 'CamelCase method name' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'Use of ELSE IF or ELSEIF' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 231; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 1, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = FALSE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:654
[29-Sep-2022 17:04:10 Europe/Paris] PHP   7. PHP_CodeSniffer\Reports\Cbf->generateFileReport($report = ['filename' => 'D:\\work-dir\\console-options\\src\\Option.php', 'errors' => 1, 'warnings' => 0, 'fixable' => 1, 'messages' => [1 => [...]]], $phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\src\\Option.php'; protected $content = '<?php\r\ndeclare(strict_types=1);\r\n/**\r\n * User: Fabien Sanchez\r\n * Date: 19/12/2018\r\n * Time: 15:41\r\n */\r\n\r\nnamespace Console\\Options;\r\n\r\nclass Option\r\n{\r\n    /**\r\n     * Type d\'option\r\n     */\r\n    const T_FLAG = 1;\r\n    const T_INTEGER = 2;\r\n    const T_DOUBLE = 16;\r\n    const T_STRING = 4;\r\n    const T_PATH = 8;\r\n    /**\r\n     * nom long de l\'option\r\n     * @var string\r\n     */\r\n    private $name;\r\n    /**\r\n     * nom court de l\'option\r\n     * @var string|null\r\n     */\r\n    private $shortname;\r\n    /**\r\n '...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 231 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 1371; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 1371; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Constant name case' => [...], 'PHP constant case' => [...], 'Function opening brace placement' => [...], 'CamelCase method name' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'Use of ELSE IF or ELSEIF' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Constant name case' => [...], 'PHP constant case' => [...], 'Function opening brace placement' => [...], 'CamelCase method name' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'Use of ELSE IF or ELSEIF' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 231; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, $showSources = FALSE, $width = 0) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reporter.php:285
[29-Sep-2022 17:04:10 Europe/Paris] PHP   8. PHP_CodeSniffer\Fixer->fixFile() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reports\Cbf.php:52
[29-Sep-2022 17:04:10 Europe/Paris] PHP   9. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Fixer.php:172
[29-Sep-2022 17:04:10 Europe/Paris] PHP  10. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:04:10 Europe/Paris] PHP  11. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'function abc(...)') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:04:10 Europe/Paris] PHP  12. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:04:10 Europe/Paris] PHP  13. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:04:10 Europe/Paris] PHP  14. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:04:10 Europe/Paris] PHP  15. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:04:10 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:04:10 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:04:10 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcbf:0
[29-Sep-2022 17:04:10 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcbf:120
[29-Sep-2022 17:04:10 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCBF() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcbf:18
[29-Sep-2022 17:04:10 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->run() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:200
[29-Sep-2022 17:04:10 Europe/Paris] PHP   5. PHP_CodeSniffer\Runner->processFile($file = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\src\\Option.php'; protected $content = '<?php\r\ndeclare(strict_types=1);\r\n/**\r\n * User: Fabien Sanchez\r\n * Date: 19/12/2018\r\n * Time: 15:41\r\n */\r\n\r\nnamespace Console\\Options;\r\n\r\nclass Option\r\n{\r\n    /**\r\n     * Type d\'option\r\n     */\r\n    const T_FLAG = 1;\r\n    const T_INTEGER = 2;\r\n    const T_DOUBLE = 16;\r\n    const T_STRING = 4;\r\n    const T_PATH = 8;\r\n    /**\r\n     * nom long de l\'option\r\n     * @var string\r\n     */\r\n    private $name;\r\n    /**\r\n     * nom court de l\'option\r\n     * @var string|null\r\n     */\r\n    private $shortname;\r\n    /**\r\n '...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 231 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 1371; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 1371; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Constant name case' => [...], 'PHP constant case' => [...], 'Function opening brace placement' => [...], 'CamelCase method name' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'Use of ELSE IF or ELSEIF' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Constant name case' => [...], 'PHP constant case' => [...], 'Function opening brace placement' => [...], 'CamelCase method name' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'Use of ELSE IF or ELSEIF' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 231; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:434
[29-Sep-2022 17:04:10 Europe/Paris] PHP   6. PHP_CodeSniffer\Reporter->cacheFileReport($phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\src\\Option.php'; protected $content = '<?php\r\ndeclare(strict_types=1);\r\n/**\r\n * User: Fabien Sanchez\r\n * Date: 19/12/2018\r\n * Time: 15:41\r\n */\r\n\r\nnamespace Console\\Options;\r\n\r\nclass Option\r\n{\r\n    /**\r\n     * Type d\'option\r\n     */\r\n    const T_FLAG = 1;\r\n    const T_INTEGER = 2;\r\n    const T_DOUBLE = 16;\r\n    const T_STRING = 4;\r\n    const T_PATH = 8;\r\n    /**\r\n     * nom long de l\'option\r\n     * @var string\r\n     */\r\n    private $name;\r\n    /**\r\n     * nom court de l\'option\r\n     * @var string|null\r\n     */\r\n    private $shortname;\r\n    /**\r\n '...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 231 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 1371; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 1371; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Constant name case' => [...], 'PHP constant case' => [...], 'Function opening brace placement' => [...], 'CamelCase method name' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'Use of ELSE IF or ELSEIF' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Constant name case' => [...], 'PHP constant case' => [...], 'Function opening brace placement' => [...], 'CamelCase method name' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'Use of ELSE IF or ELSEIF' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 231; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 1, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = FALSE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:654
[29-Sep-2022 17:04:10 Europe/Paris] PHP   7. PHP_CodeSniffer\Reports\Cbf->generateFileReport($report = ['filename' => 'D:\\work-dir\\console-options\\src\\Option.php', 'errors' => 1, 'warnings' => 0, 'fixable' => 1, 'messages' => [1 => [...]]], $phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\src\\Option.php'; protected $content = '<?php\r\ndeclare(strict_types=1);\r\n/**\r\n * User: Fabien Sanchez\r\n * Date: 19/12/2018\r\n * Time: 15:41\r\n */\r\n\r\nnamespace Console\\Options;\r\n\r\nclass Option\r\n{\r\n    /**\r\n     * Type d\'option\r\n     */\r\n    const T_FLAG = 1;\r\n    const T_INTEGER = 2;\r\n    const T_DOUBLE = 16;\r\n    const T_STRING = 4;\r\n    const T_PATH = 8;\r\n    /**\r\n     * nom long de l\'option\r\n     * @var string\r\n     */\r\n    private $name;\r\n    /**\r\n     * nom court de l\'option\r\n     * @var string|null\r\n     */\r\n    private $shortname;\r\n    /**\r\n '...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 231 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 1371; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 1371; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Constant name case' => [...], 'PHP constant case' => [...], 'Function opening brace placement' => [...], 'CamelCase method name' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'Use of ELSE IF or ELSEIF' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Constant name case' => [...], 'PHP constant case' => [...], 'Function opening brace placement' => [...], 'CamelCase method name' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'Use of ELSE IF or ELSEIF' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 231; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, $showSources = FALSE, $width = 0) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reporter.php:285
[29-Sep-2022 17:04:10 Europe/Paris] PHP   8. PHP_CodeSniffer\Fixer->fixFile() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reports\Cbf.php:52
[29-Sep-2022 17:04:10 Europe/Paris] PHP   9. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Fixer.php:172
[29-Sep-2022 17:04:10 Europe/Paris] PHP  10. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:04:10 Europe/Paris] PHP  11. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'abstract function abc(...);') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:04:10 Europe/Paris] PHP  12. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:04:10 Europe/Paris] PHP  13. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:04:10 Europe/Paris] PHP  14. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:04:10 Europe/Paris] PHP  15. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:04:11 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:04:11 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:04:11 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcbf:0
[29-Sep-2022 17:04:11 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcbf:120
[29-Sep-2022 17:04:11 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCBF() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcbf:18
[29-Sep-2022 17:04:11 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->run() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:200
[29-Sep-2022 17:04:11 Europe/Paris] PHP   5. PHP_CodeSniffer\Runner->processFile($file = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\src\\OptionParser.php'; protected $content = '<?php\r\ndeclare(strict_types=1);\r\n/**\r\n * User: Fabien Sanchez\r\n * Date: 19/12/2018\r\n * Time: 15:36\r\n */\r\n\r\nnamespace Console\\Options;\r\n\r\n/**\r\n * Class OptionParser\r\n * @package Console\\Options\r\n * @template-implements \\ArrayAccess<string,mixed>\r\n */\r\nclass OptionParser implements \\ArrayAccess\r\n{\r\n    /**\r\n     * options\r\n     * @var array<string,\\Console\\Options\\Option>\r\n     */\r\n    private $options = [];\r\n    /**\r\n     * parameters\r\n     * @var mixed[]\r\n     */\r\n    private $parameters;\r\n\r\n    /**\r\n     *'...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 1256; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 1256; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'CamelCase method name' => [...], 'PHP constant case' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'CamelCase method name' => [...], 'PHP constant case' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:434
[29-Sep-2022 17:04:11 Europe/Paris] PHP   6. PHP_CodeSniffer\Reporter->cacheFileReport($phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\src\\OptionParser.php'; protected $content = '<?php\r\ndeclare(strict_types=1);\r\n/**\r\n * User: Fabien Sanchez\r\n * Date: 19/12/2018\r\n * Time: 15:36\r\n */\r\n\r\nnamespace Console\\Options;\r\n\r\n/**\r\n * Class OptionParser\r\n * @package Console\\Options\r\n * @template-implements \\ArrayAccess<string,mixed>\r\n */\r\nclass OptionParser implements \\ArrayAccess\r\n{\r\n    /**\r\n     * options\r\n     * @var array<string,\\Console\\Options\\Option>\r\n     */\r\n    private $options = [];\r\n    /**\r\n     * parameters\r\n     * @var mixed[]\r\n     */\r\n    private $parameters;\r\n\r\n    /**\r\n     *'...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 1256; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 1256; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'CamelCase method name' => [...], 'PHP constant case' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'CamelCase method name' => [...], 'PHP constant case' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 1, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = FALSE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:654
[29-Sep-2022 17:04:11 Europe/Paris] PHP   7. PHP_CodeSniffer\Reports\Cbf->generateFileReport($report = ['filename' => 'D:\\work-dir\\console-options\\src\\OptionParser.php', 'errors' => 1, 'warnings' => 0, 'fixable' => 1, 'messages' => [1 => [...]]], $phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\src\\OptionParser.php'; protected $content = '<?php\r\ndeclare(strict_types=1);\r\n/**\r\n * User: Fabien Sanchez\r\n * Date: 19/12/2018\r\n * Time: 15:36\r\n */\r\n\r\nnamespace Console\\Options;\r\n\r\n/**\r\n * Class OptionParser\r\n * @package Console\\Options\r\n * @template-implements \\ArrayAccess<string,mixed>\r\n */\r\nclass OptionParser implements \\ArrayAccess\r\n{\r\n    /**\r\n     * options\r\n     * @var array<string,\\Console\\Options\\Option>\r\n     */\r\n    private $options = [];\r\n    /**\r\n     * parameters\r\n     * @var mixed[]\r\n     */\r\n    private $parameters;\r\n\r\n    /**\r\n     *'...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 1256; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 1256; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'CamelCase method name' => [...], 'PHP constant case' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'CamelCase method name' => [...], 'PHP constant case' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, $showSources = FALSE, $width = 0) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reporter.php:285
[29-Sep-2022 17:04:11 Europe/Paris] PHP   8. PHP_CodeSniffer\Fixer->fixFile() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reports\Cbf.php:52
[29-Sep-2022 17:04:11 Europe/Paris] PHP   9. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Fixer.php:172
[29-Sep-2022 17:04:11 Europe/Paris] PHP  10. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:04:11 Europe/Paris] PHP  11. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'function abc(...);') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:04:11 Europe/Paris] PHP  12. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:04:11 Europe/Paris] PHP  13. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:04:11 Europe/Paris] PHP  14. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:04:11 Europe/Paris] PHP  15. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:04:11 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:04:11 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:04:11 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcbf:0
[29-Sep-2022 17:04:11 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcbf:120
[29-Sep-2022 17:04:11 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCBF() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcbf:18
[29-Sep-2022 17:04:11 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->run() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:200
[29-Sep-2022 17:04:11 Europe/Paris] PHP   5. PHP_CodeSniffer\Runner->processFile($file = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\src\\OptionParser.php'; protected $content = '<?php\r\ndeclare(strict_types=1);\r\n/**\r\n * User: Fabien Sanchez\r\n * Date: 19/12/2018\r\n * Time: 15:36\r\n */\r\n\r\nnamespace Console\\Options;\r\n\r\n/**\r\n * Class OptionParser\r\n * @package Console\\Options\r\n * @template-implements \\ArrayAccess<string,mixed>\r\n */\r\nclass OptionParser implements \\ArrayAccess\r\n{\r\n    /**\r\n     * options\r\n     * @var array<string,\\Console\\Options\\Option>\r\n     */\r\n    private $options = [];\r\n    /**\r\n     * parameters\r\n     * @var mixed[]\r\n     */\r\n    private $parameters;\r\n\r\n    /**\r\n     *'...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 1256; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 1256; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'CamelCase method name' => [...], 'PHP constant case' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'CamelCase method name' => [...], 'PHP constant case' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:434
[29-Sep-2022 17:04:11 Europe/Paris] PHP   6. PHP_CodeSniffer\Reporter->cacheFileReport($phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\src\\OptionParser.php'; protected $content = '<?php\r\ndeclare(strict_types=1);\r\n/**\r\n * User: Fabien Sanchez\r\n * Date: 19/12/2018\r\n * Time: 15:36\r\n */\r\n\r\nnamespace Console\\Options;\r\n\r\n/**\r\n * Class OptionParser\r\n * @package Console\\Options\r\n * @template-implements \\ArrayAccess<string,mixed>\r\n */\r\nclass OptionParser implements \\ArrayAccess\r\n{\r\n    /**\r\n     * options\r\n     * @var array<string,\\Console\\Options\\Option>\r\n     */\r\n    private $options = [];\r\n    /**\r\n     * parameters\r\n     * @var mixed[]\r\n     */\r\n    private $parameters;\r\n\r\n    /**\r\n     *'...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 1256; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 1256; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'CamelCase method name' => [...], 'PHP constant case' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'CamelCase method name' => [...], 'PHP constant case' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 1, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = FALSE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:654
[29-Sep-2022 17:04:11 Europe/Paris] PHP   7. PHP_CodeSniffer\Reports\Cbf->generateFileReport($report = ['filename' => 'D:\\work-dir\\console-options\\src\\OptionParser.php', 'errors' => 1, 'warnings' => 0, 'fixable' => 1, 'messages' => [1 => [...]]], $phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\src\\OptionParser.php'; protected $content = '<?php\r\ndeclare(strict_types=1);\r\n/**\r\n * User: Fabien Sanchez\r\n * Date: 19/12/2018\r\n * Time: 15:36\r\n */\r\n\r\nnamespace Console\\Options;\r\n\r\n/**\r\n * Class OptionParser\r\n * @package Console\\Options\r\n * @template-implements \\ArrayAccess<string,mixed>\r\n */\r\nclass OptionParser implements \\ArrayAccess\r\n{\r\n    /**\r\n     * options\r\n     * @var array<string,\\Console\\Options\\Option>\r\n     */\r\n    private $options = [];\r\n    /**\r\n     * parameters\r\n     * @var mixed[]\r\n     */\r\n    private $parameters;\r\n\r\n    /**\r\n     *'...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 1256; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 1256; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'CamelCase method name' => [...], 'PHP constant case' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'CamelCase method name' => [...], 'PHP constant case' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, $showSources = FALSE, $width = 0) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reporter.php:285
[29-Sep-2022 17:04:11 Europe/Paris] PHP   8. PHP_CodeSniffer\Fixer->fixFile() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reports\Cbf.php:52
[29-Sep-2022 17:04:11 Europe/Paris] PHP   9. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Fixer.php:172
[29-Sep-2022 17:04:11 Europe/Paris] PHP  10. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:04:11 Europe/Paris] PHP  11. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'function abc(...)') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:04:11 Europe/Paris] PHP  12. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:04:11 Europe/Paris] PHP  13. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:04:11 Europe/Paris] PHP  14. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:04:11 Europe/Paris] PHP  15. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:04:11 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:04:11 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:04:11 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcbf:0
[29-Sep-2022 17:04:11 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcbf:120
[29-Sep-2022 17:04:11 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCBF() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcbf:18
[29-Sep-2022 17:04:11 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->run() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:200
[29-Sep-2022 17:04:11 Europe/Paris] PHP   5. PHP_CodeSniffer\Runner->processFile($file = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\src\\OptionParser.php'; protected $content = '<?php\r\ndeclare(strict_types=1);\r\n/**\r\n * User: Fabien Sanchez\r\n * Date: 19/12/2018\r\n * Time: 15:36\r\n */\r\n\r\nnamespace Console\\Options;\r\n\r\n/**\r\n * Class OptionParser\r\n * @package Console\\Options\r\n * @template-implements \\ArrayAccess<string,mixed>\r\n */\r\nclass OptionParser implements \\ArrayAccess\r\n{\r\n    /**\r\n     * options\r\n     * @var array<string,\\Console\\Options\\Option>\r\n     */\r\n    private $options = [];\r\n    /**\r\n     * parameters\r\n     * @var mixed[]\r\n     */\r\n    private $parameters;\r\n\r\n    /**\r\n     *'...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 1256; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 1256; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'CamelCase method name' => [...], 'PHP constant case' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'CamelCase method name' => [...], 'PHP constant case' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:434
[29-Sep-2022 17:04:11 Europe/Paris] PHP   6. PHP_CodeSniffer\Reporter->cacheFileReport($phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\src\\OptionParser.php'; protected $content = '<?php\r\ndeclare(strict_types=1);\r\n/**\r\n * User: Fabien Sanchez\r\n * Date: 19/12/2018\r\n * Time: 15:36\r\n */\r\n\r\nnamespace Console\\Options;\r\n\r\n/**\r\n * Class OptionParser\r\n * @package Console\\Options\r\n * @template-implements \\ArrayAccess<string,mixed>\r\n */\r\nclass OptionParser implements \\ArrayAccess\r\n{\r\n    /**\r\n     * options\r\n     * @var array<string,\\Console\\Options\\Option>\r\n     */\r\n    private $options = [];\r\n    /**\r\n     * parameters\r\n     * @var mixed[]\r\n     */\r\n    private $parameters;\r\n\r\n    /**\r\n     *'...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 1256; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 1256; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'CamelCase method name' => [...], 'PHP constant case' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'CamelCase method name' => [...], 'PHP constant case' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 1, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = FALSE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:654
[29-Sep-2022 17:04:11 Europe/Paris] PHP   7. PHP_CodeSniffer\Reports\Cbf->generateFileReport($report = ['filename' => 'D:\\work-dir\\console-options\\src\\OptionParser.php', 'errors' => 1, 'warnings' => 0, 'fixable' => 1, 'messages' => [1 => [...]]], $phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\src\\OptionParser.php'; protected $content = '<?php\r\ndeclare(strict_types=1);\r\n/**\r\n * User: Fabien Sanchez\r\n * Date: 19/12/2018\r\n * Time: 15:36\r\n */\r\n\r\nnamespace Console\\Options;\r\n\r\n/**\r\n * Class OptionParser\r\n * @package Console\\Options\r\n * @template-implements \\ArrayAccess<string,mixed>\r\n */\r\nclass OptionParser implements \\ArrayAccess\r\n{\r\n    /**\r\n     * options\r\n     * @var array<string,\\Console\\Options\\Option>\r\n     */\r\n    private $options = [];\r\n    /**\r\n     * parameters\r\n     * @var mixed[]\r\n     */\r\n    private $parameters;\r\n\r\n    /**\r\n     *'...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 1256; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 1256; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'CamelCase method name' => [...], 'PHP constant case' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'CamelCase method name' => [...], 'PHP constant case' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, $showSources = FALSE, $width = 0) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reporter.php:285
[29-Sep-2022 17:04:11 Europe/Paris] PHP   8. PHP_CodeSniffer\Fixer->fixFile() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reports\Cbf.php:52
[29-Sep-2022 17:04:11 Europe/Paris] PHP   9. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Fixer.php:172
[29-Sep-2022 17:04:11 Europe/Paris] PHP  10. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:04:11 Europe/Paris] PHP  11. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'abstract function abc(...);') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:04:11 Europe/Paris] PHP  12. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:04:11 Europe/Paris] PHP  13. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:04:11 Europe/Paris] PHP  14. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:04:11 Europe/Paris] PHP  15. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:04:11 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:04:11 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:04:11 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcbf:0
[29-Sep-2022 17:04:11 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcbf:120
[29-Sep-2022 17:04:11 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCBF() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcbf:18
[29-Sep-2022 17:04:11 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->run() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:200
[29-Sep-2022 17:04:11 Europe/Paris] PHP   5. PHP_CodeSniffer\Runner->processFile($file = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\src\\OptionParser.php'; protected $content = '<?php\r\ndeclare(strict_types=1);\r\n/**\r\n * User: Fabien Sanchez\r\n * Date: 19/12/2018\r\n * Time: 15:36\r\n */\r\n\r\nnamespace Console\\Options;\r\n\r\n/**\r\n * Class OptionParser\r\n * @package Console\\Options\r\n * @template-implements \\ArrayAccess<string,mixed>\r\n */\r\nclass OptionParser implements \\ArrayAccess\r\n{\r\n    /**\r\n     * options\r\n     * @var array<string,\\Console\\Options\\Option>\r\n     */\r\n    private $options = [];\r\n    /**\r\n     * parameters\r\n     * @var mixed[]\r\n     */\r\n    private $parameters;\r\n\r\n    /**\r\n     *'...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 172 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 1256; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 1256; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'CamelCase method name' => [...], 'PHP constant case' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'CamelCase method name' => [...], 'PHP constant case' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 172; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:434
[29-Sep-2022 17:04:11 Europe/Paris] PHP   6. PHP_CodeSniffer\Reporter->cacheFileReport($phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\src\\OptionParser.php'; protected $content = '<?php\r\ndeclare(strict_types=1);\r\n/**\r\n * User: Fabien Sanchez\r\n * Date: 19/12/2018\r\n * Time: 15:36\r\n */\r\n\r\nnamespace Console\\Options;\r\n\r\n/**\r\n * Class OptionParser\r\n * @package Console\\Options\r\n * @template-implements \\ArrayAccess<string,mixed>\r\n */\r\nclass OptionParser implements \\ArrayAccess\r\n{\r\n    /**\r\n     * options\r\n     * @var array<string,\\Console\\Options\\Option>\r\n     */\r\n    private $options = [];\r\n    /**\r\n     * parameters\r\n     * @var mixed[]\r\n     */\r\n    private $parameters;\r\n\r\n    /**\r\n     *'...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 172 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 1256; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 1256; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'CamelCase method name' => [...], 'PHP constant case' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'CamelCase method name' => [...], 'PHP constant case' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 172; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 1, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = FALSE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:654
[29-Sep-2022 17:04:11 Europe/Paris] PHP   7. PHP_CodeSniffer\Reports\Cbf->generateFileReport($report = ['filename' => 'D:\\work-dir\\console-options\\src\\OptionParser.php', 'errors' => 1, 'warnings' => 0, 'fixable' => 1, 'messages' => [1 => [...]]], $phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\src\\OptionParser.php'; protected $content = '<?php\r\ndeclare(strict_types=1);\r\n/**\r\n * User: Fabien Sanchez\r\n * Date: 19/12/2018\r\n * Time: 15:36\r\n */\r\n\r\nnamespace Console\\Options;\r\n\r\n/**\r\n * Class OptionParser\r\n * @package Console\\Options\r\n * @template-implements \\ArrayAccess<string,mixed>\r\n */\r\nclass OptionParser implements \\ArrayAccess\r\n{\r\n    /**\r\n     * options\r\n     * @var array<string,\\Console\\Options\\Option>\r\n     */\r\n    private $options = [];\r\n    /**\r\n     * parameters\r\n     * @var mixed[]\r\n     */\r\n    private $parameters;\r\n\r\n    /**\r\n     *'...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 172 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 1256; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 1256; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'CamelCase method name' => [...], 'PHP constant case' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'CamelCase method name' => [...], 'PHP constant case' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 172; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, $showSources = FALSE, $width = 0) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reporter.php:285
[29-Sep-2022 17:04:11 Europe/Paris] PHP   8. PHP_CodeSniffer\Fixer->fixFile() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reports\Cbf.php:52
[29-Sep-2022 17:04:11 Europe/Paris] PHP   9. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Fixer.php:172
[29-Sep-2022 17:04:11 Europe/Paris] PHP  10. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:04:11 Europe/Paris] PHP  11. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'function abc(...);') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:04:11 Europe/Paris] PHP  12. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:04:11 Europe/Paris] PHP  13. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:04:11 Europe/Paris] PHP  14. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:04:11 Europe/Paris] PHP  15. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:04:11 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:04:11 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:04:11 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcbf:0
[29-Sep-2022 17:04:11 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcbf:120
[29-Sep-2022 17:04:11 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCBF() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcbf:18
[29-Sep-2022 17:04:11 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->run() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:200
[29-Sep-2022 17:04:11 Europe/Paris] PHP   5. PHP_CodeSniffer\Runner->processFile($file = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\src\\OptionParser.php'; protected $content = '<?php\r\ndeclare(strict_types=1);\r\n/**\r\n * User: Fabien Sanchez\r\n * Date: 19/12/2018\r\n * Time: 15:36\r\n */\r\n\r\nnamespace Console\\Options;\r\n\r\n/**\r\n * Class OptionParser\r\n * @package Console\\Options\r\n * @template-implements \\ArrayAccess<string,mixed>\r\n */\r\nclass OptionParser implements \\ArrayAccess\r\n{\r\n    /**\r\n     * options\r\n     * @var array<string,\\Console\\Options\\Option>\r\n     */\r\n    private $options = [];\r\n    /**\r\n     * parameters\r\n     * @var mixed[]\r\n     */\r\n    private $parameters;\r\n\r\n    /**\r\n     *'...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 172 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 1256; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 1256; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'CamelCase method name' => [...], 'PHP constant case' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'CamelCase method name' => [...], 'PHP constant case' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 172; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:434
[29-Sep-2022 17:04:11 Europe/Paris] PHP   6. PHP_CodeSniffer\Reporter->cacheFileReport($phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\src\\OptionParser.php'; protected $content = '<?php\r\ndeclare(strict_types=1);\r\n/**\r\n * User: Fabien Sanchez\r\n * Date: 19/12/2018\r\n * Time: 15:36\r\n */\r\n\r\nnamespace Console\\Options;\r\n\r\n/**\r\n * Class OptionParser\r\n * @package Console\\Options\r\n * @template-implements \\ArrayAccess<string,mixed>\r\n */\r\nclass OptionParser implements \\ArrayAccess\r\n{\r\n    /**\r\n     * options\r\n     * @var array<string,\\Console\\Options\\Option>\r\n     */\r\n    private $options = [];\r\n    /**\r\n     * parameters\r\n     * @var mixed[]\r\n     */\r\n    private $parameters;\r\n\r\n    /**\r\n     *'...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 172 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 1256; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 1256; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'CamelCase method name' => [...], 'PHP constant case' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'CamelCase method name' => [...], 'PHP constant case' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 172; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 1, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = FALSE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:654
[29-Sep-2022 17:04:11 Europe/Paris] PHP   7. PHP_CodeSniffer\Reports\Cbf->generateFileReport($report = ['filename' => 'D:\\work-dir\\console-options\\src\\OptionParser.php', 'errors' => 1, 'warnings' => 0, 'fixable' => 1, 'messages' => [1 => [...]]], $phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\src\\OptionParser.php'; protected $content = '<?php\r\ndeclare(strict_types=1);\r\n/**\r\n * User: Fabien Sanchez\r\n * Date: 19/12/2018\r\n * Time: 15:36\r\n */\r\n\r\nnamespace Console\\Options;\r\n\r\n/**\r\n * Class OptionParser\r\n * @package Console\\Options\r\n * @template-implements \\ArrayAccess<string,mixed>\r\n */\r\nclass OptionParser implements \\ArrayAccess\r\n{\r\n    /**\r\n     * options\r\n     * @var array<string,\\Console\\Options\\Option>\r\n     */\r\n    private $options = [];\r\n    /**\r\n     * parameters\r\n     * @var mixed[]\r\n     */\r\n    private $parameters;\r\n\r\n    /**\r\n     *'...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 172 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 1256; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 1256; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'CamelCase method name' => [...], 'PHP constant case' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'CamelCase method name' => [...], 'PHP constant case' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 172; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, $showSources = FALSE, $width = 0) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reporter.php:285
[29-Sep-2022 17:04:11 Europe/Paris] PHP   8. PHP_CodeSniffer\Fixer->fixFile() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reports\Cbf.php:52
[29-Sep-2022 17:04:11 Europe/Paris] PHP   9. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Fixer.php:172
[29-Sep-2022 17:04:11 Europe/Paris] PHP  10. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:04:11 Europe/Paris] PHP  11. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'function abc(...)') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:04:11 Europe/Paris] PHP  12. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:04:11 Europe/Paris] PHP  13. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:04:11 Europe/Paris] PHP  14. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:04:11 Europe/Paris] PHP  15. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:04:11 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:04:11 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:04:11 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcbf:0
[29-Sep-2022 17:04:11 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcbf:120
[29-Sep-2022 17:04:11 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCBF() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcbf:18
[29-Sep-2022 17:04:11 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->run() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:200
[29-Sep-2022 17:04:11 Europe/Paris] PHP   5. PHP_CodeSniffer\Runner->processFile($file = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\src\\OptionParser.php'; protected $content = '<?php\r\ndeclare(strict_types=1);\r\n/**\r\n * User: Fabien Sanchez\r\n * Date: 19/12/2018\r\n * Time: 15:36\r\n */\r\n\r\nnamespace Console\\Options;\r\n\r\n/**\r\n * Class OptionParser\r\n * @package Console\\Options\r\n * @template-implements \\ArrayAccess<string,mixed>\r\n */\r\nclass OptionParser implements \\ArrayAccess\r\n{\r\n    /**\r\n     * options\r\n     * @var array<string,\\Console\\Options\\Option>\r\n     */\r\n    private $options = [];\r\n    /**\r\n     * parameters\r\n     * @var mixed[]\r\n     */\r\n    private $parameters;\r\n\r\n    /**\r\n     *'...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 172 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 1256; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 1256; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'CamelCase method name' => [...], 'PHP constant case' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'CamelCase method name' => [...], 'PHP constant case' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 172; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:434
[29-Sep-2022 17:04:11 Europe/Paris] PHP   6. PHP_CodeSniffer\Reporter->cacheFileReport($phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\src\\OptionParser.php'; protected $content = '<?php\r\ndeclare(strict_types=1);\r\n/**\r\n * User: Fabien Sanchez\r\n * Date: 19/12/2018\r\n * Time: 15:36\r\n */\r\n\r\nnamespace Console\\Options;\r\n\r\n/**\r\n * Class OptionParser\r\n * @package Console\\Options\r\n * @template-implements \\ArrayAccess<string,mixed>\r\n */\r\nclass OptionParser implements \\ArrayAccess\r\n{\r\n    /**\r\n     * options\r\n     * @var array<string,\\Console\\Options\\Option>\r\n     */\r\n    private $options = [];\r\n    /**\r\n     * parameters\r\n     * @var mixed[]\r\n     */\r\n    private $parameters;\r\n\r\n    /**\r\n     *'...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 172 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 1256; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 1256; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'CamelCase method name' => [...], 'PHP constant case' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'CamelCase method name' => [...], 'PHP constant case' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 172; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 1, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = FALSE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:654
[29-Sep-2022 17:04:11 Europe/Paris] PHP   7. PHP_CodeSniffer\Reports\Cbf->generateFileReport($report = ['filename' => 'D:\\work-dir\\console-options\\src\\OptionParser.php', 'errors' => 1, 'warnings' => 0, 'fixable' => 1, 'messages' => [1 => [...]]], $phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\src\\OptionParser.php'; protected $content = '<?php\r\ndeclare(strict_types=1);\r\n/**\r\n * User: Fabien Sanchez\r\n * Date: 19/12/2018\r\n * Time: 15:36\r\n */\r\n\r\nnamespace Console\\Options;\r\n\r\n/**\r\n * Class OptionParser\r\n * @package Console\\Options\r\n * @template-implements \\ArrayAccess<string,mixed>\r\n */\r\nclass OptionParser implements \\ArrayAccess\r\n{\r\n    /**\r\n     * options\r\n     * @var array<string,\\Console\\Options\\Option>\r\n     */\r\n    private $options = [];\r\n    /**\r\n     * parameters\r\n     * @var mixed[]\r\n     */\r\n    private $parameters;\r\n\r\n    /**\r\n     *'...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 172 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 1256; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 1256; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'CamelCase method name' => [...], 'PHP constant case' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...], 'Spaces after control structure open parenthesis' => [...], 'Spaces before control structure close parenthesis' => [...], 'Blank lines at start of control structure' => [...], 'Blank lines at end of control structure' => [...], 'Control structure defined inline' => [...], 'CamelCase method name' => [...], 'PHP constant case' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 172; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, $showSources = FALSE, $width = 0) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reporter.php:285
[29-Sep-2022 17:04:11 Europe/Paris] PHP   8. PHP_CodeSniffer\Fixer->fixFile() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reports\Cbf.php:52
[29-Sep-2022 17:04:11 Europe/Paris] PHP   9. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Fixer.php:172
[29-Sep-2022 17:04:11 Europe/Paris] PHP  10. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:04:11 Europe/Paris] PHP  11. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'abstract function abc(...);') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:04:11 Europe/Paris] PHP  12. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:04:11 Europe/Paris] PHP  13. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:04:11 Europe/Paris] PHP  14. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:04:11 Europe/Paris] PHP  15. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:04:11 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:04:11 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:04:11 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcbf:0
[29-Sep-2022 17:04:11 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcbf:120
[29-Sep-2022 17:04:11 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCBF() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcbf:18
[29-Sep-2022 17:04:11 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->run() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:200
[29-Sep-2022 17:04:11 Europe/Paris] PHP   5. PHP_CodeSniffer\Runner->processFile($file = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionParserTest.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse Console\\Options\\OptionParser;\r\n\r\nclass OptionParserTest extends TestCase\r\n{\r\n\r\n    public function testPaseSimpleOption()\r\n    {\r\n        $options = new OptionParser([\r\n            (new Option(\'config\', \'c\'))->setRequired()\r\n        ]);\r\n        $options->parse(["script.php", "-config", "./confog.json"]);\r\n        self::assertEquals("./confog.json", $options[\'config\']);\r\n    }\r\n\r\n    public function testParseWithDefault()\r\n    {\r\n        $options = new OptionParser'...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 382; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 382; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 2; protected $warningCount = 0; protected $fixableCount = 2; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:434
[29-Sep-2022 17:04:11 Europe/Paris] PHP   6. PHP_CodeSniffer\Reporter->cacheFileReport($phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionParserTest.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse Console\\Options\\OptionParser;\r\n\r\nclass OptionParserTest extends TestCase\r\n{\r\n\r\n    public function testPaseSimpleOption()\r\n    {\r\n        $options = new OptionParser([\r\n            (new Option(\'config\', \'c\'))->setRequired()\r\n        ]);\r\n        $options->parse(["script.php", "-config", "./confog.json"]);\r\n        self::assertEquals("./confog.json", $options[\'config\']);\r\n    }\r\n\r\n    public function testParseWithDefault()\r\n    {\r\n        $options = new OptionParser'...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 382; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 382; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 2; protected $warningCount = 0; protected $fixableCount = 2; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 1, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = FALSE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:654
[29-Sep-2022 17:04:11 Europe/Paris] PHP   7. PHP_CodeSniffer\Reports\Cbf->generateFileReport($report = ['filename' => 'D:\\work-dir\\console-options\\test\\OptionParserTest.php', 'errors' => 2, 'warnings' => 0, 'fixable' => 2, 'messages' => [1 => [...]]], $phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionParserTest.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse Console\\Options\\OptionParser;\r\n\r\nclass OptionParserTest extends TestCase\r\n{\r\n\r\n    public function testPaseSimpleOption()\r\n    {\r\n        $options = new OptionParser([\r\n            (new Option(\'config\', \'c\'))->setRequired()\r\n        ]);\r\n        $options->parse(["script.php", "-config", "./confog.json"]);\r\n        self::assertEquals("./confog.json", $options[\'config\']);\r\n    }\r\n\r\n    public function testParseWithDefault()\r\n    {\r\n        $options = new OptionParser'...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 382; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 382; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 2; protected $warningCount = 0; protected $fixableCount = 2; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, $showSources = FALSE, $width = 0) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reporter.php:285
[29-Sep-2022 17:04:11 Europe/Paris] PHP   8. PHP_CodeSniffer\Fixer->fixFile() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reports\Cbf.php:52
[29-Sep-2022 17:04:11 Europe/Paris] PHP   9. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Fixer.php:172
[29-Sep-2022 17:04:11 Europe/Paris] PHP  10. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:04:11 Europe/Paris] PHP  11. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'function abc(...);') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:04:11 Europe/Paris] PHP  12. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:04:11 Europe/Paris] PHP  13. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:04:11 Europe/Paris] PHP  14. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:04:11 Europe/Paris] PHP  15. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:04:11 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:04:11 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:04:11 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcbf:0
[29-Sep-2022 17:04:11 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcbf:120
[29-Sep-2022 17:04:11 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCBF() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcbf:18
[29-Sep-2022 17:04:11 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->run() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:200
[29-Sep-2022 17:04:11 Europe/Paris] PHP   5. PHP_CodeSniffer\Runner->processFile($file = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionParserTest.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse Console\\Options\\OptionParser;\r\n\r\nclass OptionParserTest extends TestCase\r\n{\r\n\r\n    public function testPaseSimpleOption()\r\n    {\r\n        $options = new OptionParser([\r\n            (new Option(\'config\', \'c\'))->setRequired()\r\n        ]);\r\n        $options->parse(["script.php", "-config", "./confog.json"]);\r\n        self::assertEquals("./confog.json", $options[\'config\']);\r\n    }\r\n\r\n    public function testParseWithDefault()\r\n    {\r\n        $options = new OptionParser'...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 382; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 382; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 2; protected $warningCount = 0; protected $fixableCount = 2; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:434
[29-Sep-2022 17:04:11 Europe/Paris] PHP   6. PHP_CodeSniffer\Reporter->cacheFileReport($phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionParserTest.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse Console\\Options\\OptionParser;\r\n\r\nclass OptionParserTest extends TestCase\r\n{\r\n\r\n    public function testPaseSimpleOption()\r\n    {\r\n        $options = new OptionParser([\r\n            (new Option(\'config\', \'c\'))->setRequired()\r\n        ]);\r\n        $options->parse(["script.php", "-config", "./confog.json"]);\r\n        self::assertEquals("./confog.json", $options[\'config\']);\r\n    }\r\n\r\n    public function testParseWithDefault()\r\n    {\r\n        $options = new OptionParser'...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 382; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 382; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 2; protected $warningCount = 0; protected $fixableCount = 2; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 1, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = FALSE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:654
[29-Sep-2022 17:04:11 Europe/Paris] PHP   7. PHP_CodeSniffer\Reports\Cbf->generateFileReport($report = ['filename' => 'D:\\work-dir\\console-options\\test\\OptionParserTest.php', 'errors' => 2, 'warnings' => 0, 'fixable' => 2, 'messages' => [1 => [...]]], $phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionParserTest.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse Console\\Options\\OptionParser;\r\n\r\nclass OptionParserTest extends TestCase\r\n{\r\n\r\n    public function testPaseSimpleOption()\r\n    {\r\n        $options = new OptionParser([\r\n            (new Option(\'config\', \'c\'))->setRequired()\r\n        ]);\r\n        $options->parse(["script.php", "-config", "./confog.json"]);\r\n        self::assertEquals("./confog.json", $options[\'config\']);\r\n    }\r\n\r\n    public function testParseWithDefault()\r\n    {\r\n        $options = new OptionParser'...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 382; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 382; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 2; protected $warningCount = 0; protected $fixableCount = 2; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, $showSources = FALSE, $width = 0) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reporter.php:285
[29-Sep-2022 17:04:11 Europe/Paris] PHP   8. PHP_CodeSniffer\Fixer->fixFile() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reports\Cbf.php:52
[29-Sep-2022 17:04:11 Europe/Paris] PHP   9. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Fixer.php:172
[29-Sep-2022 17:04:11 Europe/Paris] PHP  10. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:04:11 Europe/Paris] PHP  11. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'function abc(...)') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:04:11 Europe/Paris] PHP  12. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:04:11 Europe/Paris] PHP  13. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:04:11 Europe/Paris] PHP  14. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:04:11 Europe/Paris] PHP  15. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:04:11 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:04:11 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:04:11 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcbf:0
[29-Sep-2022 17:04:11 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcbf:120
[29-Sep-2022 17:04:11 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCBF() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcbf:18
[29-Sep-2022 17:04:11 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->run() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:200
[29-Sep-2022 17:04:11 Europe/Paris] PHP   5. PHP_CodeSniffer\Runner->processFile($file = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionParserTest.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse Console\\Options\\OptionParser;\r\n\r\nclass OptionParserTest extends TestCase\r\n{\r\n\r\n    public function testPaseSimpleOption()\r\n    {\r\n        $options = new OptionParser([\r\n            (new Option(\'config\', \'c\'))->setRequired()\r\n        ]);\r\n        $options->parse(["script.php", "-config", "./confog.json"]);\r\n        self::assertEquals("./confog.json", $options[\'config\']);\r\n    }\r\n\r\n    public function testParseWithDefault()\r\n    {\r\n        $options = new OptionParser'...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 382; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 382; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 2; protected $warningCount = 0; protected $fixableCount = 2; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:434
[29-Sep-2022 17:04:11 Europe/Paris] PHP   6. PHP_CodeSniffer\Reporter->cacheFileReport($phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionParserTest.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse Console\\Options\\OptionParser;\r\n\r\nclass OptionParserTest extends TestCase\r\n{\r\n\r\n    public function testPaseSimpleOption()\r\n    {\r\n        $options = new OptionParser([\r\n            (new Option(\'config\', \'c\'))->setRequired()\r\n        ]);\r\n        $options->parse(["script.php", "-config", "./confog.json"]);\r\n        self::assertEquals("./confog.json", $options[\'config\']);\r\n    }\r\n\r\n    public function testParseWithDefault()\r\n    {\r\n        $options = new OptionParser'...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 382; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 382; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 2; protected $warningCount = 0; protected $fixableCount = 2; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 1, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = FALSE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:654
[29-Sep-2022 17:04:11 Europe/Paris] PHP   7. PHP_CodeSniffer\Reports\Cbf->generateFileReport($report = ['filename' => 'D:\\work-dir\\console-options\\test\\OptionParserTest.php', 'errors' => 2, 'warnings' => 0, 'fixable' => 2, 'messages' => [1 => [...]]], $phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionParserTest.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse Console\\Options\\OptionParser;\r\n\r\nclass OptionParserTest extends TestCase\r\n{\r\n\r\n    public function testPaseSimpleOption()\r\n    {\r\n        $options = new OptionParser([\r\n            (new Option(\'config\', \'c\'))->setRequired()\r\n        ]);\r\n        $options->parse(["script.php", "-config", "./confog.json"]);\r\n        self::assertEquals("./confog.json", $options[\'config\']);\r\n    }\r\n\r\n    public function testParseWithDefault()\r\n    {\r\n        $options = new OptionParser'...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 382; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 382; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 2; protected $warningCount = 0; protected $fixableCount = 2; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, $showSources = FALSE, $width = 0) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reporter.php:285
[29-Sep-2022 17:04:11 Europe/Paris] PHP   8. PHP_CodeSniffer\Fixer->fixFile() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reports\Cbf.php:52
[29-Sep-2022 17:04:11 Europe/Paris] PHP   9. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Fixer.php:172
[29-Sep-2022 17:04:11 Europe/Paris] PHP  10. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:04:11 Europe/Paris] PHP  11. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'abstract function abc(...);') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:04:11 Europe/Paris] PHP  12. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:04:11 Europe/Paris] PHP  13. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:04:11 Europe/Paris] PHP  14. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:04:11 Europe/Paris] PHP  15. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:04:11 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:04:11 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:04:11 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcbf:0
[29-Sep-2022 17:04:11 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcbf:120
[29-Sep-2022 17:04:11 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCBF() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcbf:18
[29-Sep-2022 17:04:11 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->run() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:200
[29-Sep-2022 17:04:11 Europe/Paris] PHP   5. PHP_CodeSniffer\Runner->processFile($file = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionParserTest.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse Console\\Options\\OptionParser;\r\n\r\nclass OptionParserTest extends TestCase\r\n{\r\n\r\n    public function testPaseSimpleOption()\r\n    {\r\n        $options = new OptionParser([\r\n            (new Option(\'config\', \'c\'))->setRequired()\r\n        ]);\r\n        $options->parse(["script.php", "-config", "./confog.json"]);\r\n        self::assertEquals("./confog.json", $options[\'config\']);\r\n    }\r\n\r\n    public function testParseWithDefault()\r\n    {\r\n        $options = new OptionParser'...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 49 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 382; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 382; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 2; protected $warningCount = 0; protected $fixableCount = 2; protected $fixedCount = 49; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:434
[29-Sep-2022 17:04:11 Europe/Paris] PHP   6. PHP_CodeSniffer\Reporter->cacheFileReport($phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionParserTest.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse Console\\Options\\OptionParser;\r\n\r\nclass OptionParserTest extends TestCase\r\n{\r\n\r\n    public function testPaseSimpleOption()\r\n    {\r\n        $options = new OptionParser([\r\n            (new Option(\'config\', \'c\'))->setRequired()\r\n        ]);\r\n        $options->parse(["script.php", "-config", "./confog.json"]);\r\n        self::assertEquals("./confog.json", $options[\'config\']);\r\n    }\r\n\r\n    public function testParseWithDefault()\r\n    {\r\n        $options = new OptionParser'...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 49 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 382; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 382; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 2; protected $warningCount = 0; protected $fixableCount = 2; protected $fixedCount = 49; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 1, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = FALSE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:654
[29-Sep-2022 17:04:11 Europe/Paris] PHP   7. PHP_CodeSniffer\Reports\Cbf->generateFileReport($report = ['filename' => 'D:\\work-dir\\console-options\\test\\OptionParserTest.php', 'errors' => 2, 'warnings' => 0, 'fixable' => 2, 'messages' => [1 => [...]]], $phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionParserTest.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse Console\\Options\\OptionParser;\r\n\r\nclass OptionParserTest extends TestCase\r\n{\r\n\r\n    public function testPaseSimpleOption()\r\n    {\r\n        $options = new OptionParser([\r\n            (new Option(\'config\', \'c\'))->setRequired()\r\n        ]);\r\n        $options->parse(["script.php", "-config", "./confog.json"]);\r\n        self::assertEquals("./confog.json", $options[\'config\']);\r\n    }\r\n\r\n    public function testParseWithDefault()\r\n    {\r\n        $options = new OptionParser'...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 49 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 382; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 382; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 2; protected $warningCount = 0; protected $fixableCount = 2; protected $fixedCount = 49; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, $showSources = FALSE, $width = 0) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reporter.php:285
[29-Sep-2022 17:04:11 Europe/Paris] PHP   8. PHP_CodeSniffer\Fixer->fixFile() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reports\Cbf.php:52
[29-Sep-2022 17:04:11 Europe/Paris] PHP   9. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Fixer.php:172
[29-Sep-2022 17:04:11 Europe/Paris] PHP  10. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:04:11 Europe/Paris] PHP  11. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'function abc(...);') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:04:11 Europe/Paris] PHP  12. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:04:11 Europe/Paris] PHP  13. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:04:11 Europe/Paris] PHP  14. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:04:11 Europe/Paris] PHP  15. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:04:11 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:04:11 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:04:11 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcbf:0
[29-Sep-2022 17:04:11 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcbf:120
[29-Sep-2022 17:04:11 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCBF() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcbf:18
[29-Sep-2022 17:04:11 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->run() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:200
[29-Sep-2022 17:04:11 Europe/Paris] PHP   5. PHP_CodeSniffer\Runner->processFile($file = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionParserTest.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse Console\\Options\\OptionParser;\r\n\r\nclass OptionParserTest extends TestCase\r\n{\r\n\r\n    public function testPaseSimpleOption()\r\n    {\r\n        $options = new OptionParser([\r\n            (new Option(\'config\', \'c\'))->setRequired()\r\n        ]);\r\n        $options->parse(["script.php", "-config", "./confog.json"]);\r\n        self::assertEquals("./confog.json", $options[\'config\']);\r\n    }\r\n\r\n    public function testParseWithDefault()\r\n    {\r\n        $options = new OptionParser'...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 49 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 382; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 382; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 2; protected $warningCount = 0; protected $fixableCount = 2; protected $fixedCount = 49; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:434
[29-Sep-2022 17:04:11 Europe/Paris] PHP   6. PHP_CodeSniffer\Reporter->cacheFileReport($phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionParserTest.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse Console\\Options\\OptionParser;\r\n\r\nclass OptionParserTest extends TestCase\r\n{\r\n\r\n    public function testPaseSimpleOption()\r\n    {\r\n        $options = new OptionParser([\r\n            (new Option(\'config\', \'c\'))->setRequired()\r\n        ]);\r\n        $options->parse(["script.php", "-config", "./confog.json"]);\r\n        self::assertEquals("./confog.json", $options[\'config\']);\r\n    }\r\n\r\n    public function testParseWithDefault()\r\n    {\r\n        $options = new OptionParser'...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 49 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 382; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 382; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 2; protected $warningCount = 0; protected $fixableCount = 2; protected $fixedCount = 49; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 1, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = FALSE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:654
[29-Sep-2022 17:04:11 Europe/Paris] PHP   7. PHP_CodeSniffer\Reports\Cbf->generateFileReport($report = ['filename' => 'D:\\work-dir\\console-options\\test\\OptionParserTest.php', 'errors' => 2, 'warnings' => 0, 'fixable' => 2, 'messages' => [1 => [...]]], $phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionParserTest.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse Console\\Options\\OptionParser;\r\n\r\nclass OptionParserTest extends TestCase\r\n{\r\n\r\n    public function testPaseSimpleOption()\r\n    {\r\n        $options = new OptionParser([\r\n            (new Option(\'config\', \'c\'))->setRequired()\r\n        ]);\r\n        $options->parse(["script.php", "-config", "./confog.json"]);\r\n        self::assertEquals("./confog.json", $options[\'config\']);\r\n    }\r\n\r\n    public function testParseWithDefault()\r\n    {\r\n        $options = new OptionParser'...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 49 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 382; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 382; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 2; protected $warningCount = 0; protected $fixableCount = 2; protected $fixedCount = 49; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, $showSources = FALSE, $width = 0) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reporter.php:285
[29-Sep-2022 17:04:11 Europe/Paris] PHP   8. PHP_CodeSniffer\Fixer->fixFile() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reports\Cbf.php:52
[29-Sep-2022 17:04:11 Europe/Paris] PHP   9. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Fixer.php:172
[29-Sep-2022 17:04:11 Europe/Paris] PHP  10. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:04:11 Europe/Paris] PHP  11. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'function abc(...)') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:04:11 Europe/Paris] PHP  12. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:04:11 Europe/Paris] PHP  13. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:04:11 Europe/Paris] PHP  14. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:04:11 Europe/Paris] PHP  15. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:04:11 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:04:11 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:04:11 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcbf:0
[29-Sep-2022 17:04:11 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcbf:120
[29-Sep-2022 17:04:11 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCBF() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcbf:18
[29-Sep-2022 17:04:11 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->run() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:200
[29-Sep-2022 17:04:11 Europe/Paris] PHP   5. PHP_CodeSniffer\Runner->processFile($file = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionParserTest.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse Console\\Options\\OptionParser;\r\n\r\nclass OptionParserTest extends TestCase\r\n{\r\n\r\n    public function testPaseSimpleOption()\r\n    {\r\n        $options = new OptionParser([\r\n            (new Option(\'config\', \'c\'))->setRequired()\r\n        ]);\r\n        $options->parse(["script.php", "-config", "./confog.json"]);\r\n        self::assertEquals("./confog.json", $options[\'config\']);\r\n    }\r\n\r\n    public function testParseWithDefault()\r\n    {\r\n        $options = new OptionParser'...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 49 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 382; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 382; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 2; protected $warningCount = 0; protected $fixableCount = 2; protected $fixedCount = 49; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:434
[29-Sep-2022 17:04:11 Europe/Paris] PHP   6. PHP_CodeSniffer\Reporter->cacheFileReport($phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionParserTest.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse Console\\Options\\OptionParser;\r\n\r\nclass OptionParserTest extends TestCase\r\n{\r\n\r\n    public function testPaseSimpleOption()\r\n    {\r\n        $options = new OptionParser([\r\n            (new Option(\'config\', \'c\'))->setRequired()\r\n        ]);\r\n        $options->parse(["script.php", "-config", "./confog.json"]);\r\n        self::assertEquals("./confog.json", $options[\'config\']);\r\n    }\r\n\r\n    public function testParseWithDefault()\r\n    {\r\n        $options = new OptionParser'...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 49 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 382; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 382; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 2; protected $warningCount = 0; protected $fixableCount = 2; protected $fixedCount = 49; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 1, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = FALSE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:654
[29-Sep-2022 17:04:11 Europe/Paris] PHP   7. PHP_CodeSniffer\Reports\Cbf->generateFileReport($report = ['filename' => 'D:\\work-dir\\console-options\\test\\OptionParserTest.php', 'errors' => 2, 'warnings' => 0, 'fixable' => 2, 'messages' => [1 => [...]]], $phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionParserTest.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse Console\\Options\\OptionParser;\r\n\r\nclass OptionParserTest extends TestCase\r\n{\r\n\r\n    public function testPaseSimpleOption()\r\n    {\r\n        $options = new OptionParser([\r\n            (new Option(\'config\', \'c\'))->setRequired()\r\n        ]);\r\n        $options->parse(["script.php", "-config", "./confog.json"]);\r\n        self::assertEquals("./confog.json", $options[\'config\']);\r\n    }\r\n\r\n    public function testParseWithDefault()\r\n    {\r\n        $options = new OptionParser'...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 49 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 382; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 382; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 2; protected $warningCount = 0; protected $fixableCount = 2; protected $fixedCount = 49; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, $showSources = FALSE, $width = 0) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reporter.php:285
[29-Sep-2022 17:04:11 Europe/Paris] PHP   8. PHP_CodeSniffer\Fixer->fixFile() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reports\Cbf.php:52
[29-Sep-2022 17:04:11 Europe/Paris] PHP   9. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Fixer.php:172
[29-Sep-2022 17:04:11 Europe/Paris] PHP  10. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:04:11 Europe/Paris] PHP  11. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'abstract function abc(...);') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:04:11 Europe/Paris] PHP  12. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:04:11 Europe/Paris] PHP  13. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:04:11 Europe/Paris] PHP  14. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:04:11 Europe/Paris] PHP  15. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:04:11 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:04:11 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:04:11 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcbf:0
[29-Sep-2022 17:04:11 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcbf:120
[29-Sep-2022 17:04:11 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCBF() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcbf:18
[29-Sep-2022 17:04:11 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->run() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:200
[29-Sep-2022 17:04:11 Europe/Paris] PHP   5. PHP_CodeSniffer\Runner->processFile($file = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionParserTest.php'; protected $content = '<?php\n\nnamespace Console\\Options;\n\nuse Console\\Options\\OptionParser;\n\nclass OptionParserTest extends TestCase\n{\n\n    public function testPaseSimpleOption()\n    {\n        $options = new OptionParser([\n            (new Option(\'config\', \'c\'))->setRequired()\n        ]);\n        $options->parse(["script.php", "-config", "./confog.json"]);\n        self::assertEquals("./confog.json", $options[\'config\']);\n    }\n\n    public function testParseWithDefault()\n    {\n        $options = new OptionParser([\n            (new '...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 2; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 3 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\n'; protected $tokens = [...]; protected $numTokens = 382; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 382; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 52; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:434
[29-Sep-2022 17:04:11 Europe/Paris] PHP   6. PHP_CodeSniffer\Reporter->cacheFileReport($phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionParserTest.php'; protected $content = '<?php\n\nnamespace Console\\Options;\n\nuse Console\\Options\\OptionParser;\n\nclass OptionParserTest extends TestCase\n{\n\n    public function testPaseSimpleOption()\n    {\n        $options = new OptionParser([\n            (new Option(\'config\', \'c\'))->setRequired()\n        ]);\n        $options->parse(["script.php", "-config", "./confog.json"]);\n        self::assertEquals("./confog.json", $options[\'config\']);\n    }\n\n    public function testParseWithDefault()\n    {\n        $options = new OptionParser([\n            (new '...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 2; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 3 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\n'; protected $tokens = [...]; protected $numTokens = 382; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 382; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 52; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 1, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = FALSE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:654
[29-Sep-2022 17:04:11 Europe/Paris] PHP   7. PHP_CodeSniffer\Reports\Cbf->generateFileReport($report = ['filename' => 'D:\\work-dir\\console-options\\test\\OptionParserTest.php', 'errors' => 2, 'warnings' => 0, 'fixable' => 2, 'messages' => [1 => [...]]], $phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionParserTest.php'; protected $content = '<?php\n\nnamespace Console\\Options;\n\nuse Console\\Options\\OptionParser;\n\nclass OptionParserTest extends TestCase\n{\n\n    public function testPaseSimpleOption()\n    {\n        $options = new OptionParser([\n            (new Option(\'config\', \'c\'))->setRequired()\n        ]);\n        $options->parse(["script.php", "-config", "./confog.json"]);\n        self::assertEquals("./confog.json", $options[\'config\']);\n    }\n\n    public function testParseWithDefault()\n    {\n        $options = new OptionParser([\n            (new '...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 2; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 3 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\n'; protected $tokens = [...]; protected $numTokens = 382; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 382; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 52; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, $showSources = FALSE, $width = 0) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reporter.php:285
[29-Sep-2022 17:04:11 Europe/Paris] PHP   8. PHP_CodeSniffer\Fixer->fixFile() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reports\Cbf.php:52
[29-Sep-2022 17:04:11 Europe/Paris] PHP   9. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Fixer.php:172
[29-Sep-2022 17:04:11 Europe/Paris] PHP  10. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:04:11 Europe/Paris] PHP  11. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'function abc(...);') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:04:11 Europe/Paris] PHP  12. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:04:11 Europe/Paris] PHP  13. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:04:11 Europe/Paris] PHP  14. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:04:11 Europe/Paris] PHP  15. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:04:11 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:04:11 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:04:11 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcbf:0
[29-Sep-2022 17:04:11 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcbf:120
[29-Sep-2022 17:04:11 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCBF() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcbf:18
[29-Sep-2022 17:04:11 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->run() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:200
[29-Sep-2022 17:04:11 Europe/Paris] PHP   5. PHP_CodeSniffer\Runner->processFile($file = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionParserTest.php'; protected $content = '<?php\n\nnamespace Console\\Options;\n\nuse Console\\Options\\OptionParser;\n\nclass OptionParserTest extends TestCase\n{\n\n    public function testPaseSimpleOption()\n    {\n        $options = new OptionParser([\n            (new Option(\'config\', \'c\'))->setRequired()\n        ]);\n        $options->parse(["script.php", "-config", "./confog.json"]);\n        self::assertEquals("./confog.json", $options[\'config\']);\n    }\n\n    public function testParseWithDefault()\n    {\n        $options = new OptionParser([\n            (new '...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 2; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 3 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\n'; protected $tokens = [...]; protected $numTokens = 382; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 382; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 52; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:434
[29-Sep-2022 17:04:11 Europe/Paris] PHP   6. PHP_CodeSniffer\Reporter->cacheFileReport($phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionParserTest.php'; protected $content = '<?php\n\nnamespace Console\\Options;\n\nuse Console\\Options\\OptionParser;\n\nclass OptionParserTest extends TestCase\n{\n\n    public function testPaseSimpleOption()\n    {\n        $options = new OptionParser([\n            (new Option(\'config\', \'c\'))->setRequired()\n        ]);\n        $options->parse(["script.php", "-config", "./confog.json"]);\n        self::assertEquals("./confog.json", $options[\'config\']);\n    }\n\n    public function testParseWithDefault()\n    {\n        $options = new OptionParser([\n            (new '...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 2; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 3 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\n'; protected $tokens = [...]; protected $numTokens = 382; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 382; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 52; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 1, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = FALSE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:654
[29-Sep-2022 17:04:11 Europe/Paris] PHP   7. PHP_CodeSniffer\Reports\Cbf->generateFileReport($report = ['filename' => 'D:\\work-dir\\console-options\\test\\OptionParserTest.php', 'errors' => 2, 'warnings' => 0, 'fixable' => 2, 'messages' => [1 => [...]]], $phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionParserTest.php'; protected $content = '<?php\n\nnamespace Console\\Options;\n\nuse Console\\Options\\OptionParser;\n\nclass OptionParserTest extends TestCase\n{\n\n    public function testPaseSimpleOption()\n    {\n        $options = new OptionParser([\n            (new Option(\'config\', \'c\'))->setRequired()\n        ]);\n        $options->parse(["script.php", "-config", "./confog.json"]);\n        self::assertEquals("./confog.json", $options[\'config\']);\n    }\n\n    public function testParseWithDefault()\n    {\n        $options = new OptionParser([\n            (new '...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 2; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 3 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\n'; protected $tokens = [...]; protected $numTokens = 382; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 382; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 52; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, $showSources = FALSE, $width = 0) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reporter.php:285
[29-Sep-2022 17:04:11 Europe/Paris] PHP   8. PHP_CodeSniffer\Fixer->fixFile() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reports\Cbf.php:52
[29-Sep-2022 17:04:11 Europe/Paris] PHP   9. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Fixer.php:172
[29-Sep-2022 17:04:11 Europe/Paris] PHP  10. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:04:11 Europe/Paris] PHP  11. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'function abc(...)') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:04:11 Europe/Paris] PHP  12. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:04:11 Europe/Paris] PHP  13. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:04:11 Europe/Paris] PHP  14. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:04:11 Europe/Paris] PHP  15. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:04:11 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:04:11 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:04:11 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcbf:0
[29-Sep-2022 17:04:11 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcbf:120
[29-Sep-2022 17:04:11 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCBF() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcbf:18
[29-Sep-2022 17:04:11 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->run() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:200
[29-Sep-2022 17:04:11 Europe/Paris] PHP   5. PHP_CodeSniffer\Runner->processFile($file = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionParserTest.php'; protected $content = '<?php\n\nnamespace Console\\Options;\n\nuse Console\\Options\\OptionParser;\n\nclass OptionParserTest extends TestCase\n{\n\n    public function testPaseSimpleOption()\n    {\n        $options = new OptionParser([\n            (new Option(\'config\', \'c\'))->setRequired()\n        ]);\n        $options->parse(["script.php", "-config", "./confog.json"]);\n        self::assertEquals("./confog.json", $options[\'config\']);\n    }\n\n    public function testParseWithDefault()\n    {\n        $options = new OptionParser([\n            (new '...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 2; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 3 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\n'; protected $tokens = [...]; protected $numTokens = 382; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 382; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 52; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:434
[29-Sep-2022 17:04:11 Europe/Paris] PHP   6. PHP_CodeSniffer\Reporter->cacheFileReport($phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionParserTest.php'; protected $content = '<?php\n\nnamespace Console\\Options;\n\nuse Console\\Options\\OptionParser;\n\nclass OptionParserTest extends TestCase\n{\n\n    public function testPaseSimpleOption()\n    {\n        $options = new OptionParser([\n            (new Option(\'config\', \'c\'))->setRequired()\n        ]);\n        $options->parse(["script.php", "-config", "./confog.json"]);\n        self::assertEquals("./confog.json", $options[\'config\']);\n    }\n\n    public function testParseWithDefault()\n    {\n        $options = new OptionParser([\n            (new '...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 2; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 3 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\n'; protected $tokens = [...]; protected $numTokens = 382; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 382; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 52; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 1, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = FALSE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:654
[29-Sep-2022 17:04:11 Europe/Paris] PHP   7. PHP_CodeSniffer\Reports\Cbf->generateFileReport($report = ['filename' => 'D:\\work-dir\\console-options\\test\\OptionParserTest.php', 'errors' => 2, 'warnings' => 0, 'fixable' => 2, 'messages' => [1 => [...]]], $phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionParserTest.php'; protected $content = '<?php\n\nnamespace Console\\Options;\n\nuse Console\\Options\\OptionParser;\n\nclass OptionParserTest extends TestCase\n{\n\n    public function testPaseSimpleOption()\n    {\n        $options = new OptionParser([\n            (new Option(\'config\', \'c\'))->setRequired()\n        ]);\n        $options->parse(["script.php", "-config", "./confog.json"]);\n        self::assertEquals("./confog.json", $options[\'config\']);\n    }\n\n    public function testParseWithDefault()\n    {\n        $options = new OptionParser([\n            (new '...; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 2; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 3 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\n'; protected $tokens = [...]; protected $numTokens = 382; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 382; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...], 77 => [...], 78 => [...], 79 => [...], 80 => [...], 81 => [...], 82 => [...], 83 => [...], 84 => [...], 85 => [...], 86 => [...], 87 => [...], 88 => [...], 89 => [...], 90 => [...], 91 => [...], 92 => [...], 93 => [...], 94 => [...], 95 => [...], 96 => [...], 97 => [...], 98 => [...], 99 => [...], 100 => [...], 101 => [...], 102 => [...], 103 => [...], 104 => [...], 105 => [...], 106 => [...], 107 => [...], 108 => [...], 109 => [...], 110 => [...], 111 => [...], 112 => [...], 113 => [...], 114 => [...], 115 => [...], 116 => [...], 117 => [...], 118 => [...], 119 => [...], 120 => [...], 121 => [...], 122 => [...], 123 => [...], 124 => [...], 125 => [...], 126 => [...], 127 => [...], ...]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 52; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, $showSources = FALSE, $width = 0) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reporter.php:285
[29-Sep-2022 17:04:11 Europe/Paris] PHP   8. PHP_CodeSniffer\Fixer->fixFile() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reports\Cbf.php:52
[29-Sep-2022 17:04:11 Europe/Paris] PHP   9. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Fixer.php:172
[29-Sep-2022 17:04:11 Europe/Paris] PHP  10. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:04:11 Europe/Paris] PHP  11. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'abstract function abc(...);') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:04:11 Europe/Paris] PHP  12. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:04:11 Europe/Paris] PHP  13. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:04:11 Europe/Paris] PHP  14. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:04:11 Europe/Paris] PHP  15. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:04:11 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:04:11 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:04:11 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcbf:0
[29-Sep-2022 17:04:11 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcbf:120
[29-Sep-2022 17:04:11 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCBF() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcbf:18
[29-Sep-2022 17:04:11 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->run() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:200
[29-Sep-2022 17:04:11 Europe/Paris] PHP   5. PHP_CodeSniffer\Runner->processFile($file = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionTest.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse Console\\Options\\Option;\r\n\r\nclass OptionTest extends TestCase\r\n{\r\n    public function testCreationOption()\r\n    {\r\n        $this->expectNotToPerformAssertions();\r\n        $opt = (new Option(\'config\', \'c\'))->setRequired();\r\n    }\r\n}\r\n'; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 77; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 77; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...]]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:434
[29-Sep-2022 17:04:11 Europe/Paris] PHP   6. PHP_CodeSniffer\Reporter->cacheFileReport($phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionTest.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse Console\\Options\\Option;\r\n\r\nclass OptionTest extends TestCase\r\n{\r\n    public function testCreationOption()\r\n    {\r\n        $this->expectNotToPerformAssertions();\r\n        $opt = (new Option(\'config\', \'c\'))->setRequired();\r\n    }\r\n}\r\n'; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 77; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 77; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...]]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 1, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = FALSE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:654
[29-Sep-2022 17:04:11 Europe/Paris] PHP   7. PHP_CodeSniffer\Reports\Cbf->generateFileReport($report = ['filename' => 'D:\\work-dir\\console-options\\test\\OptionTest.php', 'errors' => 1, 'warnings' => 0, 'fixable' => 1, 'messages' => [1 => [...]]], $phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionTest.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse Console\\Options\\Option;\r\n\r\nclass OptionTest extends TestCase\r\n{\r\n    public function testCreationOption()\r\n    {\r\n        $this->expectNotToPerformAssertions();\r\n        $opt = (new Option(\'config\', \'c\'))->setRequired();\r\n    }\r\n}\r\n'; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 77; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 77; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...]]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, $showSources = FALSE, $width = 0) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reporter.php:285
[29-Sep-2022 17:04:11 Europe/Paris] PHP   8. PHP_CodeSniffer\Fixer->fixFile() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reports\Cbf.php:52
[29-Sep-2022 17:04:11 Europe/Paris] PHP   9. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Fixer.php:172
[29-Sep-2022 17:04:11 Europe/Paris] PHP  10. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:04:11 Europe/Paris] PHP  11. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'function abc(...);') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:04:11 Europe/Paris] PHP  12. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:04:11 Europe/Paris] PHP  13. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:04:11 Europe/Paris] PHP  14. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:04:11 Europe/Paris] PHP  15. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:04:11 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:04:11 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:04:11 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcbf:0
[29-Sep-2022 17:04:11 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcbf:120
[29-Sep-2022 17:04:11 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCBF() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcbf:18
[29-Sep-2022 17:04:11 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->run() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:200
[29-Sep-2022 17:04:11 Europe/Paris] PHP   5. PHP_CodeSniffer\Runner->processFile($file = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionTest.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse Console\\Options\\Option;\r\n\r\nclass OptionTest extends TestCase\r\n{\r\n    public function testCreationOption()\r\n    {\r\n        $this->expectNotToPerformAssertions();\r\n        $opt = (new Option(\'config\', \'c\'))->setRequired();\r\n    }\r\n}\r\n'; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 77; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 77; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...]]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:434
[29-Sep-2022 17:04:11 Europe/Paris] PHP   6. PHP_CodeSniffer\Reporter->cacheFileReport($phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionTest.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse Console\\Options\\Option;\r\n\r\nclass OptionTest extends TestCase\r\n{\r\n    public function testCreationOption()\r\n    {\r\n        $this->expectNotToPerformAssertions();\r\n        $opt = (new Option(\'config\', \'c\'))->setRequired();\r\n    }\r\n}\r\n'; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 77; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 77; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...]]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 1, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = FALSE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:654
[29-Sep-2022 17:04:11 Europe/Paris] PHP   7. PHP_CodeSniffer\Reports\Cbf->generateFileReport($report = ['filename' => 'D:\\work-dir\\console-options\\test\\OptionTest.php', 'errors' => 1, 'warnings' => 0, 'fixable' => 1, 'messages' => [1 => [...]]], $phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionTest.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse Console\\Options\\Option;\r\n\r\nclass OptionTest extends TestCase\r\n{\r\n    public function testCreationOption()\r\n    {\r\n        $this->expectNotToPerformAssertions();\r\n        $opt = (new Option(\'config\', \'c\'))->setRequired();\r\n    }\r\n}\r\n'; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 77; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 77; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...]]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, $showSources = FALSE, $width = 0) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reporter.php:285
[29-Sep-2022 17:04:11 Europe/Paris] PHP   8. PHP_CodeSniffer\Fixer->fixFile() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reports\Cbf.php:52
[29-Sep-2022 17:04:11 Europe/Paris] PHP   9. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Fixer.php:172
[29-Sep-2022 17:04:11 Europe/Paris] PHP  10. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:04:11 Europe/Paris] PHP  11. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'function abc(...)') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:04:11 Europe/Paris] PHP  12. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:04:11 Europe/Paris] PHP  13. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:04:11 Europe/Paris] PHP  14. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:04:11 Europe/Paris] PHP  15. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:04:11 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:04:11 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:04:11 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcbf:0
[29-Sep-2022 17:04:11 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcbf:120
[29-Sep-2022 17:04:11 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCBF() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcbf:18
[29-Sep-2022 17:04:11 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->run() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:200
[29-Sep-2022 17:04:11 Europe/Paris] PHP   5. PHP_CodeSniffer\Runner->processFile($file = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionTest.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse Console\\Options\\Option;\r\n\r\nclass OptionTest extends TestCase\r\n{\r\n    public function testCreationOption()\r\n    {\r\n        $this->expectNotToPerformAssertions();\r\n        $opt = (new Option(\'config\', \'c\'))->setRequired();\r\n    }\r\n}\r\n'; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 77; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 77; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...]]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:434
[29-Sep-2022 17:04:11 Europe/Paris] PHP   6. PHP_CodeSniffer\Reporter->cacheFileReport($phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionTest.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse Console\\Options\\Option;\r\n\r\nclass OptionTest extends TestCase\r\n{\r\n    public function testCreationOption()\r\n    {\r\n        $this->expectNotToPerformAssertions();\r\n        $opt = (new Option(\'config\', \'c\'))->setRequired();\r\n    }\r\n}\r\n'; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 77; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 77; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...]]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 1, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = FALSE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:654
[29-Sep-2022 17:04:11 Europe/Paris] PHP   7. PHP_CodeSniffer\Reports\Cbf->generateFileReport($report = ['filename' => 'D:\\work-dir\\console-options\\test\\OptionTest.php', 'errors' => 1, 'warnings' => 0, 'fixable' => 1, 'messages' => [1 => [...]]], $phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionTest.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse Console\\Options\\Option;\r\n\r\nclass OptionTest extends TestCase\r\n{\r\n    public function testCreationOption()\r\n    {\r\n        $this->expectNotToPerformAssertions();\r\n        $opt = (new Option(\'config\', \'c\'))->setRequired();\r\n    }\r\n}\r\n'; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 77; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 77; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...]]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, $showSources = FALSE, $width = 0) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reporter.php:285
[29-Sep-2022 17:04:11 Europe/Paris] PHP   8. PHP_CodeSniffer\Fixer->fixFile() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reports\Cbf.php:52
[29-Sep-2022 17:04:11 Europe/Paris] PHP   9. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Fixer.php:172
[29-Sep-2022 17:04:11 Europe/Paris] PHP  10. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:04:11 Europe/Paris] PHP  11. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'abstract function abc(...);') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:04:12 Europe/Paris] PHP  12. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:04:12 Europe/Paris] PHP  13. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:04:12 Europe/Paris] PHP  14. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:04:12 Europe/Paris] PHP  15. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:04:12 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:04:12 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:04:12 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcbf:0
[29-Sep-2022 17:04:12 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcbf:120
[29-Sep-2022 17:04:12 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCBF() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcbf:18
[29-Sep-2022 17:04:12 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->run() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:200
[29-Sep-2022 17:04:12 Europe/Paris] PHP   5. PHP_CodeSniffer\Runner->processFile($file = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionTest.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse Console\\Options\\Option;\r\n\r\nclass OptionTest extends TestCase\r\n{\r\n    public function testCreationOption()\r\n    {\r\n        $this->expectNotToPerformAssertions();\r\n        $opt = (new Option(\'config\', \'c\'))->setRequired();\r\n    }\r\n}\r\n'; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 14 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 77; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 77; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...]]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 14; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:434
[29-Sep-2022 17:04:12 Europe/Paris] PHP   6. PHP_CodeSniffer\Reporter->cacheFileReport($phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionTest.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse Console\\Options\\Option;\r\n\r\nclass OptionTest extends TestCase\r\n{\r\n    public function testCreationOption()\r\n    {\r\n        $this->expectNotToPerformAssertions();\r\n        $opt = (new Option(\'config\', \'c\'))->setRequired();\r\n    }\r\n}\r\n'; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 14 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 77; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 77; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...]]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 14; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 1, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = FALSE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:654
[29-Sep-2022 17:04:12 Europe/Paris] PHP   7. PHP_CodeSniffer\Reports\Cbf->generateFileReport($report = ['filename' => 'D:\\work-dir\\console-options\\test\\OptionTest.php', 'errors' => 1, 'warnings' => 0, 'fixable' => 1, 'messages' => [1 => [...]]], $phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionTest.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse Console\\Options\\Option;\r\n\r\nclass OptionTest extends TestCase\r\n{\r\n    public function testCreationOption()\r\n    {\r\n        $this->expectNotToPerformAssertions();\r\n        $opt = (new Option(\'config\', \'c\'))->setRequired();\r\n    }\r\n}\r\n'; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 14 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 77; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 77; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...]]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 14; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, $showSources = FALSE, $width = 0) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reporter.php:285
[29-Sep-2022 17:04:12 Europe/Paris] PHP   8. PHP_CodeSniffer\Fixer->fixFile() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reports\Cbf.php:52
[29-Sep-2022 17:04:12 Europe/Paris] PHP   9. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Fixer.php:172
[29-Sep-2022 17:04:12 Europe/Paris] PHP  10. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:04:12 Europe/Paris] PHP  11. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'function abc(...);') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:04:12 Europe/Paris] PHP  12. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:04:12 Europe/Paris] PHP  13. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:04:12 Europe/Paris] PHP  14. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:04:12 Europe/Paris] PHP  15. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:04:12 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:04:12 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:04:12 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcbf:0
[29-Sep-2022 17:04:12 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcbf:120
[29-Sep-2022 17:04:12 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCBF() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcbf:18
[29-Sep-2022 17:04:12 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->run() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:200
[29-Sep-2022 17:04:12 Europe/Paris] PHP   5. PHP_CodeSniffer\Runner->processFile($file = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionTest.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse Console\\Options\\Option;\r\n\r\nclass OptionTest extends TestCase\r\n{\r\n    public function testCreationOption()\r\n    {\r\n        $this->expectNotToPerformAssertions();\r\n        $opt = (new Option(\'config\', \'c\'))->setRequired();\r\n    }\r\n}\r\n'; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 14 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 77; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 77; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...]]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 14; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:434
[29-Sep-2022 17:04:12 Europe/Paris] PHP   6. PHP_CodeSniffer\Reporter->cacheFileReport($phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionTest.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse Console\\Options\\Option;\r\n\r\nclass OptionTest extends TestCase\r\n{\r\n    public function testCreationOption()\r\n    {\r\n        $this->expectNotToPerformAssertions();\r\n        $opt = (new Option(\'config\', \'c\'))->setRequired();\r\n    }\r\n}\r\n'; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 14 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 77; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 77; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...]]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 14; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 1, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = FALSE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:654
[29-Sep-2022 17:04:12 Europe/Paris] PHP   7. PHP_CodeSniffer\Reports\Cbf->generateFileReport($report = ['filename' => 'D:\\work-dir\\console-options\\test\\OptionTest.php', 'errors' => 1, 'warnings' => 0, 'fixable' => 1, 'messages' => [1 => [...]]], $phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionTest.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse Console\\Options\\Option;\r\n\r\nclass OptionTest extends TestCase\r\n{\r\n    public function testCreationOption()\r\n    {\r\n        $this->expectNotToPerformAssertions();\r\n        $opt = (new Option(\'config\', \'c\'))->setRequired();\r\n    }\r\n}\r\n'; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 14 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 77; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 77; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...]]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 14; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, $showSources = FALSE, $width = 0) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reporter.php:285
[29-Sep-2022 17:04:12 Europe/Paris] PHP   8. PHP_CodeSniffer\Fixer->fixFile() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reports\Cbf.php:52
[29-Sep-2022 17:04:12 Europe/Paris] PHP   9. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Fixer.php:172
[29-Sep-2022 17:04:12 Europe/Paris] PHP  10. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:04:12 Europe/Paris] PHP  11. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'function abc(...)') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:04:12 Europe/Paris] PHP  12. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:04:12 Europe/Paris] PHP  13. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:04:12 Europe/Paris] PHP  14. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:04:12 Europe/Paris] PHP  15. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:04:12 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:04:12 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:04:12 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcbf:0
[29-Sep-2022 17:04:12 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcbf:120
[29-Sep-2022 17:04:12 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCBF() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcbf:18
[29-Sep-2022 17:04:12 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->run() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:200
[29-Sep-2022 17:04:12 Europe/Paris] PHP   5. PHP_CodeSniffer\Runner->processFile($file = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionTest.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse Console\\Options\\Option;\r\n\r\nclass OptionTest extends TestCase\r\n{\r\n    public function testCreationOption()\r\n    {\r\n        $this->expectNotToPerformAssertions();\r\n        $opt = (new Option(\'config\', \'c\'))->setRequired();\r\n    }\r\n}\r\n'; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 14 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 77; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 77; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...]]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 14; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:434
[29-Sep-2022 17:04:12 Europe/Paris] PHP   6. PHP_CodeSniffer\Reporter->cacheFileReport($phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionTest.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse Console\\Options\\Option;\r\n\r\nclass OptionTest extends TestCase\r\n{\r\n    public function testCreationOption()\r\n    {\r\n        $this->expectNotToPerformAssertions();\r\n        $opt = (new Option(\'config\', \'c\'))->setRequired();\r\n    }\r\n}\r\n'; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 14 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 77; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 77; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...]]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 14; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 1, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = FALSE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:654
[29-Sep-2022 17:04:12 Europe/Paris] PHP   7. PHP_CodeSniffer\Reports\Cbf->generateFileReport($report = ['filename' => 'D:\\work-dir\\console-options\\test\\OptionTest.php', 'errors' => 1, 'warnings' => 0, 'fixable' => 1, 'messages' => [1 => [...]]], $phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\OptionTest.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse Console\\Options\\Option;\r\n\r\nclass OptionTest extends TestCase\r\n{\r\n    public function testCreationOption()\r\n    {\r\n        $this->expectNotToPerformAssertions();\r\n        $opt = (new Option(\'config\', \'c\'))->setRequired();\r\n    }\r\n}\r\n'; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 14 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 77; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 77; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...], 37 => [...], 38 => [...], 39 => [...], 40 => [...], 41 => [...], 42 => [...], 43 => [...], 44 => [...], 45 => [...], 46 => [...], 47 => [...], 48 => [...], 49 => [...], 50 => [...], 51 => [...], 52 => [...], 53 => [...], 54 => [...], 55 => [...], 56 => [...], 57 => [...], 58 => [...], 59 => [...], 60 => [...], 61 => [...], 62 => [...], 63 => [...], 64 => [...], 65 => [...], 66 => [...], 67 => [...], 68 => [...], 69 => [...], 70 => [...], 71 => [...], 72 => [...], 73 => [...], 74 => [...], 75 => [...], 76 => [...]]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'Line indent' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...], 'Function opening brace placement' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 14; protected $replayingErrors = FALSE; protected $ignoredListeners = ['PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff' => TRUE]; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, $showSources = FALSE, $width = 0) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reporter.php:285
[29-Sep-2022 17:04:12 Europe/Paris] PHP   8. PHP_CodeSniffer\Fixer->fixFile() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reports\Cbf.php:52
[29-Sep-2022 17:04:12 Europe/Paris] PHP   9. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Fixer.php:172
[29-Sep-2022 17:04:12 Europe/Paris] PHP  10. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:04:12 Europe/Paris] PHP  11. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'abstract function abc(...);') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:04:12 Europe/Paris] PHP  12. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:04:12 Europe/Paris] PHP  13. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:04:12 Europe/Paris] PHP  14. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:04:12 Europe/Paris] PHP  15. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:04:12 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:04:12 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:04:12 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcbf:0
[29-Sep-2022 17:04:12 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcbf:120
[29-Sep-2022 17:04:12 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCBF() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcbf:18
[29-Sep-2022 17:04:12 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->run() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:200
[29-Sep-2022 17:04:12 Europe/Paris] PHP   5. PHP_CodeSniffer\Runner->processFile($file = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\TestCase.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse PHPUnit\\Framework\\TestCase as PhpUnitTestCase;\r\n\r\nclass TestCase extends PhpUnitTestCase\r\n{\r\n\r\n}\r\n'; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 37; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 37; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...]]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:434
[29-Sep-2022 17:04:12 Europe/Paris] PHP   6. PHP_CodeSniffer\Reporter->cacheFileReport($phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\TestCase.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse PHPUnit\\Framework\\TestCase as PhpUnitTestCase;\r\n\r\nclass TestCase extends PhpUnitTestCase\r\n{\r\n\r\n}\r\n'; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 37; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 37; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...]]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 1, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = FALSE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:654
[29-Sep-2022 17:04:12 Europe/Paris] PHP   7. PHP_CodeSniffer\Reports\Cbf->generateFileReport($report = ['filename' => 'D:\\work-dir\\console-options\\test\\TestCase.php', 'errors' => 1, 'warnings' => 0, 'fixable' => 1, 'messages' => [1 => [...]]], $phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\TestCase.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse PHPUnit\\Framework\\TestCase as PhpUnitTestCase;\r\n\r\nclass TestCase extends PhpUnitTestCase\r\n{\r\n\r\n}\r\n'; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 37; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 37; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...]]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, $showSources = FALSE, $width = 0) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reporter.php:285
[29-Sep-2022 17:04:12 Europe/Paris] PHP   8. PHP_CodeSniffer\Fixer->fixFile() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reports\Cbf.php:52
[29-Sep-2022 17:04:12 Europe/Paris] PHP   9. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Fixer.php:172
[29-Sep-2022 17:04:12 Europe/Paris] PHP  10. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:04:12 Europe/Paris] PHP  11. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'function abc(...);') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:04:12 Europe/Paris] PHP  12. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:04:12 Europe/Paris] PHP  13. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:04:12 Europe/Paris] PHP  14. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:04:12 Europe/Paris] PHP  15. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:04:12 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:04:12 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:04:12 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcbf:0
[29-Sep-2022 17:04:12 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcbf:120
[29-Sep-2022 17:04:12 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCBF() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcbf:18
[29-Sep-2022 17:04:12 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->run() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:200
[29-Sep-2022 17:04:12 Europe/Paris] PHP   5. PHP_CodeSniffer\Runner->processFile($file = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\TestCase.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse PHPUnit\\Framework\\TestCase as PhpUnitTestCase;\r\n\r\nclass TestCase extends PhpUnitTestCase\r\n{\r\n\r\n}\r\n'; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 37; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 37; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...]]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:434
[29-Sep-2022 17:04:12 Europe/Paris] PHP   6. PHP_CodeSniffer\Reporter->cacheFileReport($phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\TestCase.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse PHPUnit\\Framework\\TestCase as PhpUnitTestCase;\r\n\r\nclass TestCase extends PhpUnitTestCase\r\n{\r\n\r\n}\r\n'; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 37; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 37; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...]]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 1, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = FALSE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:654
[29-Sep-2022 17:04:12 Europe/Paris] PHP   7. PHP_CodeSniffer\Reports\Cbf->generateFileReport($report = ['filename' => 'D:\\work-dir\\console-options\\test\\TestCase.php', 'errors' => 1, 'warnings' => 0, 'fixable' => 1, 'messages' => [1 => [...]]], $phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\TestCase.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse PHPUnit\\Framework\\TestCase as PhpUnitTestCase;\r\n\r\nclass TestCase extends PhpUnitTestCase\r\n{\r\n\r\n}\r\n'; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 37; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 37; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...]]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, $showSources = FALSE, $width = 0) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reporter.php:285
[29-Sep-2022 17:04:12 Europe/Paris] PHP   8. PHP_CodeSniffer\Fixer->fixFile() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reports\Cbf.php:52
[29-Sep-2022 17:04:12 Europe/Paris] PHP   9. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Fixer.php:172
[29-Sep-2022 17:04:12 Europe/Paris] PHP  10. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:04:12 Europe/Paris] PHP  11. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'function abc(...)') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:04:12 Europe/Paris] PHP  12. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:04:12 Europe/Paris] PHP  13. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:04:12 Europe/Paris] PHP  14. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:04:12 Europe/Paris] PHP  15. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:04:12 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:04:12 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:04:12 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcbf:0
[29-Sep-2022 17:04:12 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcbf:120
[29-Sep-2022 17:04:12 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCBF() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcbf:18
[29-Sep-2022 17:04:12 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->run() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:200
[29-Sep-2022 17:04:12 Europe/Paris] PHP   5. PHP_CodeSniffer\Runner->processFile($file = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\TestCase.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse PHPUnit\\Framework\\TestCase as PhpUnitTestCase;\r\n\r\nclass TestCase extends PhpUnitTestCase\r\n{\r\n\r\n}\r\n'; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 37; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 37; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...]]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:434
[29-Sep-2022 17:04:12 Europe/Paris] PHP   6. PHP_CodeSniffer\Reporter->cacheFileReport($phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\TestCase.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse PHPUnit\\Framework\\TestCase as PhpUnitTestCase;\r\n\r\nclass TestCase extends PhpUnitTestCase\r\n{\r\n\r\n}\r\n'; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 37; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 37; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...]]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 1, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = FALSE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:654
[29-Sep-2022 17:04:12 Europe/Paris] PHP   7. PHP_CodeSniffer\Reports\Cbf->generateFileReport($report = ['filename' => 'D:\\work-dir\\console-options\\test\\TestCase.php', 'errors' => 1, 'warnings' => 0, 'fixable' => 1, 'messages' => [1 => [...]]], $phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\TestCase.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse PHPUnit\\Framework\\TestCase as PhpUnitTestCase;\r\n\r\nclass TestCase extends PhpUnitTestCase\r\n{\r\n\r\n}\r\n'; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 0; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 0 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 37; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 37; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...]]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 0; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, $showSources = FALSE, $width = 0) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reporter.php:285
[29-Sep-2022 17:04:12 Europe/Paris] PHP   8. PHP_CodeSniffer\Fixer->fixFile() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reports\Cbf.php:52
[29-Sep-2022 17:04:12 Europe/Paris] PHP   9. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Fixer.php:172
[29-Sep-2022 17:04:12 Europe/Paris] PHP  10. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:04:12 Europe/Paris] PHP  11. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'abstract function abc(...);') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:04:12 Europe/Paris] PHP  12. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:04:12 Europe/Paris] PHP  13. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:04:12 Europe/Paris] PHP  14. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:04:12 Europe/Paris] PHP  15. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:04:12 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:04:12 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:04:12 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcbf:0
[29-Sep-2022 17:04:12 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcbf:120
[29-Sep-2022 17:04:12 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCBF() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcbf:18
[29-Sep-2022 17:04:12 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->run() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:200
[29-Sep-2022 17:04:12 Europe/Paris] PHP   5. PHP_CodeSniffer\Runner->processFile($file = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\TestCase.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse PHPUnit\\Framework\\TestCase as PhpUnitTestCase;\r\n\r\nclass TestCase extends PhpUnitTestCase\r\n{\r\n\r\n}\r\n'; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 10 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 37; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 37; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...]]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 10; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:434
[29-Sep-2022 17:04:12 Europe/Paris] PHP   6. PHP_CodeSniffer\Reporter->cacheFileReport($phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\TestCase.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse PHPUnit\\Framework\\TestCase as PhpUnitTestCase;\r\n\r\nclass TestCase extends PhpUnitTestCase\r\n{\r\n\r\n}\r\n'; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 10 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 37; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 37; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...]]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 10; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 1, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = FALSE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:654
[29-Sep-2022 17:04:12 Europe/Paris] PHP   7. PHP_CodeSniffer\Reports\Cbf->generateFileReport($report = ['filename' => 'D:\\work-dir\\console-options\\test\\TestCase.php', 'errors' => 1, 'warnings' => 0, 'fixable' => 1, 'messages' => [1 => [...]]], $phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\TestCase.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse PHPUnit\\Framework\\TestCase as PhpUnitTestCase;\r\n\r\nclass TestCase extends PhpUnitTestCase\r\n{\r\n\r\n}\r\n'; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 10 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 37; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 37; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...]]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 10; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, $showSources = FALSE, $width = 0) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reporter.php:285
[29-Sep-2022 17:04:12 Europe/Paris] PHP   8. PHP_CodeSniffer\Fixer->fixFile() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reports\Cbf.php:52
[29-Sep-2022 17:04:12 Europe/Paris] PHP   9. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Fixer.php:172
[29-Sep-2022 17:04:12 Europe/Paris] PHP  10. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:04:12 Europe/Paris] PHP  11. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'function abc(...);') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:04:12 Europe/Paris] PHP  12. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:04:12 Europe/Paris] PHP  13. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:04:12 Europe/Paris] PHP  14. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:04:12 Europe/Paris] PHP  15. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:04:12 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:04:12 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:04:12 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcbf:0
[29-Sep-2022 17:04:12 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcbf:120
[29-Sep-2022 17:04:12 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCBF() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcbf:18
[29-Sep-2022 17:04:12 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->run() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:200
[29-Sep-2022 17:04:12 Europe/Paris] PHP   5. PHP_CodeSniffer\Runner->processFile($file = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\TestCase.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse PHPUnit\\Framework\\TestCase as PhpUnitTestCase;\r\n\r\nclass TestCase extends PhpUnitTestCase\r\n{\r\n\r\n}\r\n'; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 10 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 37; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 37; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...]]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 10; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:434
[29-Sep-2022 17:04:12 Europe/Paris] PHP   6. PHP_CodeSniffer\Reporter->cacheFileReport($phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\TestCase.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse PHPUnit\\Framework\\TestCase as PhpUnitTestCase;\r\n\r\nclass TestCase extends PhpUnitTestCase\r\n{\r\n\r\n}\r\n'; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 10 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 37; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 37; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...]]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 10; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 1, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = FALSE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:654
[29-Sep-2022 17:04:12 Europe/Paris] PHP   7. PHP_CodeSniffer\Reports\Cbf->generateFileReport($report = ['filename' => 'D:\\work-dir\\console-options\\test\\TestCase.php', 'errors' => 1, 'warnings' => 0, 'fixable' => 1, 'messages' => [1 => [...]]], $phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\TestCase.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse PHPUnit\\Framework\\TestCase as PhpUnitTestCase;\r\n\r\nclass TestCase extends PhpUnitTestCase\r\n{\r\n\r\n}\r\n'; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 10 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 37; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 37; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...]]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 10; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, $showSources = FALSE, $width = 0) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reporter.php:285
[29-Sep-2022 17:04:12 Europe/Paris] PHP   8. PHP_CodeSniffer\Fixer->fixFile() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reports\Cbf.php:52
[29-Sep-2022 17:04:12 Europe/Paris] PHP   9. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Fixer.php:172
[29-Sep-2022 17:04:12 Europe/Paris] PHP  10. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:04:12 Europe/Paris] PHP  11. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'function abc(...)') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:04:12 Europe/Paris] PHP  12. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:04:12 Europe/Paris] PHP  13. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:04:12 Europe/Paris] PHP  14. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:04:12 Europe/Paris] PHP  15. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:04:12 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:04:12 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:04:12 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcbf:0
[29-Sep-2022 17:04:12 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcbf:120
[29-Sep-2022 17:04:12 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCBF() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcbf:18
[29-Sep-2022 17:04:12 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->run() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:200
[29-Sep-2022 17:04:12 Europe/Paris] PHP   5. PHP_CodeSniffer\Runner->processFile($file = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\TestCase.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse PHPUnit\\Framework\\TestCase as PhpUnitTestCase;\r\n\r\nclass TestCase extends PhpUnitTestCase\r\n{\r\n\r\n}\r\n'; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 10 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 37; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 37; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...]]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 10; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:434
[29-Sep-2022 17:04:12 Europe/Paris] PHP   6. PHP_CodeSniffer\Reporter->cacheFileReport($phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\TestCase.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse PHPUnit\\Framework\\TestCase as PhpUnitTestCase;\r\n\r\nclass TestCase extends PhpUnitTestCase\r\n{\r\n\r\n}\r\n'; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 10 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 37; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 37; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...]]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 10; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 1, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = FALSE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:654
[29-Sep-2022 17:04:12 Europe/Paris] PHP   7. PHP_CodeSniffer\Reports\Cbf->generateFileReport($report = ['filename' => 'D:\\work-dir\\console-options\\test\\TestCase.php', 'errors' => 1, 'warnings' => 0, 'fixable' => 1, 'messages' => [1 => [...]]], $phpcsFile = class PHP_CodeSniffer\Files\LocalFile { public $path = 'D:\\work-dir\\console-options\\test\\TestCase.php'; protected $content = '<?php\r\n\r\nnamespace Console\\Options;\r\n\r\nuse PHPUnit\\Framework\\TestCase as PhpUnitTestCase;\r\n\r\nclass TestCase extends PhpUnitTestCase\r\n{\r\n\r\n}\r\n'; public $config = class PHP_CodeSniffer\Config { private $settings = [...]; public $dieOnUnknownArg = FALSE; private $cliArgs = [...] }; public $ruleset = class PHP_CodeSniffer\Ruleset { public $name = 'PHP_CodeSniffer'; public $paths = [...]; public $ignorePatterns = [...]; public $includePatterns = [...]; public $sniffs = [...]; public $sniffCodes = [...]; public $tokenListeners = [...]; public $ruleset = [...]; protected $rulesetDirs = [...]; private $config = class PHP_CodeSniffer\Config { ... } }; public $ignored = FALSE; public $eolChar = '\r\n'; public $fixer = class PHP_CodeSniffer\Fixer { public $enabled = TRUE; public $loops = 1; private $currentFile = ...; private $tokens = [...]; private $fixedTokens = [...]; private $oldTokenValues = [...]; private $changeset = [...]; private $inChangeset = FALSE; private $inConflict = FALSE; private $numFixes = 10 }; public $tokenizer = class PHP_CodeSniffer\Tokenizers\PHP { protected $config = class PHP_CodeSniffer\Config { ... }; protected $eolChar = '\r\n'; protected $tokens = [...]; protected $numTokens = 37; public $scopeOpeners = [...]; public $endScopeTokens = [...]; public $knownLengths = [...]; public $ignoredLines = [...]; protected $tstringContexts = [...] }; public $tokenizerType = 'PHP'; public $fromCache = FALSE; public $numTokens = 37; protected $tokens = [0 => [...], 1 => [...], 2 => [...], 3 => [...], 4 => [...], 5 => [...], 6 => [...], 7 => [...], 8 => [...], 9 => [...], 10 => [...], 11 => [...], 12 => [...], 13 => [...], 14 => [...], 15 => [...], 16 => [...], 17 => [...], 18 => [...], 19 => [...], 20 => [...], 21 => [...], 22 => [...], 23 => [...], 24 => [...], 25 => [...], 26 => [...], 27 => [...], 28 => [...], 29 => [...], 30 => [...], 31 => [...], 32 => [...], 33 => [...], 34 => [...], 35 => [...], 36 => [...]]; protected $errors = []; protected $warnings = []; protected $metrics = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...]]; private ${PHP_CodeSniffer\Files\File}metricTokens = ['PHP closing tag at end of PHP-only file' => [...], 'Number of newlines at EOF' => [...], 'Declarations and side effects mixed' => [...], 'PHP short open tag used' => [...], 'EOL char' => [...], 'Line length' => [...], 'PHP keyword case' => [...], 'Multiple statements on same line' => [...], 'Class opening brace placement' => [...], 'One class per file' => [...], 'Class defined in namespace' => [...], 'PascalCase class name' => [...]]; protected $errorCount = 1; protected $warningCount = 0; protected $fixableCount = 1; protected $fixedCount = 10; protected $replayingErrors = FALSE; protected $ignoredListeners = []; protected $ignoredCodes = []; protected $listeners = []; protected $activeListener = ''; protected $listenerTimes = []; protected $configCache = ['cache' => FALSE, 'sniffs' => [...], 'exclude' => [...], 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => FALSE, 'ignorePatterns' => [...], 'includePatterns' => [...]] }, $showSources = FALSE, $width = 0) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reporter.php:285
[29-Sep-2022 17:04:12 Europe/Paris] PHP   8. PHP_CodeSniffer\Fixer->fixFile() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Reports\Cbf.php:52
[29-Sep-2022 17:04:12 Europe/Paris] PHP   9. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Fixer.php:172
[29-Sep-2022 17:04:12 Europe/Paris] PHP  10. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:04:12 Europe/Paris] PHP  11. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'abstract function abc(...);') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:04:12 Europe/Paris] PHP  12. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:04:12 Europe/Paris] PHP  13. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:04:12 Europe/Paris] PHP  14. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:04:12 Europe/Paris] PHP  15. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:04:15 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:04:15 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:04:15 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcs:0
[29-Sep-2022 17:04:15 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcs:120
[29-Sep-2022 17:04:15 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCS() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcs:18
[29-Sep-2022 17:04:15 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->init() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:70
[29-Sep-2022 17:04:15 Europe/Paris] PHP   5. PHP_CodeSniffer\Ruleset->__construct($config = class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 75, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => TRUE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = TRUE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:332
[29-Sep-2022 17:04:15 Europe/Paris] PHP   6. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:218
[29-Sep-2022 17:04:15 Europe/Paris] PHP   7. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:04:15 Europe/Paris] PHP   8. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'function abc(...);') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:04:15 Europe/Paris] PHP   9. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:04:15 Europe/Paris] PHP  10. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:04:15 Europe/Paris] PHP  11. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:04:15 Europe/Paris] PHP  12. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:04:15 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:04:15 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:04:15 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcs:0
[29-Sep-2022 17:04:15 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcs:120
[29-Sep-2022 17:04:15 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCS() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcs:18
[29-Sep-2022 17:04:15 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->init() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:70
[29-Sep-2022 17:04:15 Europe/Paris] PHP   5. PHP_CodeSniffer\Ruleset->__construct($config = class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 75, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => TRUE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = TRUE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:332
[29-Sep-2022 17:04:15 Europe/Paris] PHP   6. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:218
[29-Sep-2022 17:04:15 Europe/Paris] PHP   7. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:04:15 Europe/Paris] PHP   8. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'function abc(...)') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:04:15 Europe/Paris] PHP   9. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:04:15 Europe/Paris] PHP  10. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:04:15 Europe/Paris] PHP  11. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:04:15 Europe/Paris] PHP  12. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:04:15 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:04:15 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:04:15 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcs:0
[29-Sep-2022 17:04:15 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcs:120
[29-Sep-2022 17:04:16 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCS() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcs:18
[29-Sep-2022 17:04:16 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->init() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:70
[29-Sep-2022 17:04:16 Europe/Paris] PHP   5. PHP_CodeSniffer\Ruleset->__construct($config = class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 75, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => TRUE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = TRUE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:332
[29-Sep-2022 17:04:16 Europe/Paris] PHP   6. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:218
[29-Sep-2022 17:04:16 Europe/Paris] PHP   7. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:04:16 Europe/Paris] PHP   8. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'abstract function abc(...);') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:04:16 Europe/Paris] PHP   9. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:04:16 Europe/Paris] PHP  10. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:04:16 Europe/Paris] PHP  11. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:04:16 Europe/Paris] PHP  12. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:06:09 Europe/Paris] PHP _PHPStan_3bfe2e67c\Symfony\Component\Console\Exception\RuntimeException:  The "-c" option does not exist. in phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php on line 181
[29-Sep-2022 17:06:09 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:06:09 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpstan:0
[29-Sep-2022 17:06:09 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpstan:120
[29-Sep-2022 17:06:09 Europe/Paris] PHP   3. require() D:\work-dir\console-options\vendor\phpstan\phpstan\phpstan:8
[29-Sep-2022 17:06:09 Europe/Paris] PHP   4. _PHPStan_3bfe2e67c\{closure:phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:13-125}() phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:125
[29-Sep-2022 17:06:09 Europe/Paris] PHP   5. _PHPStan_3bfe2e67c\Symfony\Component\Console\Application->run($input = *uninitialized*, $output = *uninitialized*) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:124
[29-Sep-2022 17:06:09 Europe/Paris] PHP   6. _PHPStan_3bfe2e67c\Symfony\Component\Console\Application->doRun($input = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput { protected $definition = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputDefinition { private $arguments = [...]; private $requiredCount = 1; private $lastArrayArgument = NULL; private $lastOptionalArgument = NULL; private $options = [...]; private $negations = [...]; private $shortcuts = [...] }; protected $stream = NULL; protected $options = []; protected $arguments = ['command' => 'analyze']; protected $interactive = FALSE; private $tokens = [0 => 'analyze', 1 => '-c', 2 => 'D:/work-dir/console-options/phpstan.neon', 3 => '--memory-limit=2G', 4 => '--error-format=checkstyle', 5 => '--no-progress', 6 => '--no-ansi', 7 => '--no-interaction', 8 => 'C:/Users/fabien.sanchez/AppData/Local/Temp/PHPStantemp_folder69224/src/OptionParser.php']; private $parsed = [0 => 'D:/work-dir/console-options/phpstan.neon', 1 => '--memory-limit=2G', 2 => '--error-format=checkstyle', 3 => '--no-progress', 4 => '--no-ansi', 5 => '--no-interaction', 6 => 'C:/Users/fabien.sanchez/AppData/Local/Temp/PHPStantemp_folder69224/src/OptionParser.php'] }, $output = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Output\ConsoleOutput { private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}verbosity = 32; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}formatter = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatter { private $decorated = FALSE; private $styles = [...]; private $styleStack = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatterStyleStack { ... } }; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\StreamOutput}stream = resource(2) of type (stream); private $stderr = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Output\StreamOutput { private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}verbosity = 32; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}formatter = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatter { ... }; private $stream = resource(3) of type (stream) }; private $consoleSectionOutputs = [] }) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Application.php:157
[29-Sep-2022 17:06:09 Europe/Paris] PHP   7. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\Input->bind($definition = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputDefinition { private $arguments = ['command' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputArgument { ... }]; private $requiredCount = 1; private $lastArrayArgument = NULL; private $lastOptionalArgument = NULL; private $options = ['help' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'quiet' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'verbose' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'version' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'ansi' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'no-interaction' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }]; private $negations = ['no-ansi' => 'ansi']; private $shortcuts = ['h' => 'help', 'q' => 'quiet', 'v' => 'verbose', 'vv' => 'verbose', 'vvv' => 'verbose', 'V' => 'version', 'n' => 'no-interaction'] }) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Application.php:208
[29-Sep-2022 17:06:09 Europe/Paris] PHP   8. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parse() phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/Input.php:50
[29-Sep-2022 17:06:09 Europe/Paris] PHP   9. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parseToken($token = '-c', $parseOptions = TRUE) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:63
[29-Sep-2022 17:06:09 Europe/Paris] PHP  10. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parseShortOption($token = '-c') phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:75
[29-Sep-2022 17:06:09 Europe/Paris] PHP  11. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->addShortOption($shortcut = 'c', $value = NULL) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:95
[29-Sep-2022 17:06:34 Europe/Paris] PHP _PHPStan_3bfe2e67c\Symfony\Component\Console\Exception\RuntimeException:  The "-c" option does not exist. in phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php on line 181
[29-Sep-2022 17:06:34 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:06:34 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpstan:0
[29-Sep-2022 17:06:34 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpstan:120
[29-Sep-2022 17:06:34 Europe/Paris] PHP   3. require() D:\work-dir\console-options\vendor\phpstan\phpstan\phpstan:8
[29-Sep-2022 17:06:34 Europe/Paris] PHP   4. _PHPStan_3bfe2e67c\{closure:phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:13-125}() phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:125
[29-Sep-2022 17:06:34 Europe/Paris] PHP   5. _PHPStan_3bfe2e67c\Symfony\Component\Console\Application->run($input = *uninitialized*, $output = *uninitialized*) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:124
[29-Sep-2022 17:06:34 Europe/Paris] PHP   6. _PHPStan_3bfe2e67c\Symfony\Component\Console\Application->doRun($input = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput { protected $definition = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputDefinition { private $arguments = [...]; private $requiredCount = 1; private $lastArrayArgument = NULL; private $lastOptionalArgument = NULL; private $options = [...]; private $negations = [...]; private $shortcuts = [...] }; protected $stream = NULL; protected $options = []; protected $arguments = ['command' => 'analyze']; protected $interactive = FALSE; private $tokens = [0 => 'analyze', 1 => '-c', 2 => 'D:/work-dir/console-options/phpstan.neon', 3 => '--memory-limit=2G', 4 => '--error-format=checkstyle', 5 => '--no-progress', 6 => '--no-ansi', 7 => '--no-interaction', 8 => 'C:/Users/fabien.sanchez/AppData/Local/Temp/PHPStantemp_folder24492/src/OptionParser.php']; private $parsed = [0 => 'D:/work-dir/console-options/phpstan.neon', 1 => '--memory-limit=2G', 2 => '--error-format=checkstyle', 3 => '--no-progress', 4 => '--no-ansi', 5 => '--no-interaction', 6 => 'C:/Users/fabien.sanchez/AppData/Local/Temp/PHPStantemp_folder24492/src/OptionParser.php'] }, $output = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Output\ConsoleOutput { private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}verbosity = 32; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}formatter = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatter { private $decorated = FALSE; private $styles = [...]; private $styleStack = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatterStyleStack { ... } }; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\StreamOutput}stream = resource(2) of type (stream); private $stderr = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Output\StreamOutput { private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}verbosity = 32; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}formatter = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatter { ... }; private $stream = resource(3) of type (stream) }; private $consoleSectionOutputs = [] }) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Application.php:157
[29-Sep-2022 17:06:34 Europe/Paris] PHP   7. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\Input->bind($definition = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputDefinition { private $arguments = ['command' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputArgument { ... }]; private $requiredCount = 1; private $lastArrayArgument = NULL; private $lastOptionalArgument = NULL; private $options = ['help' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'quiet' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'verbose' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'version' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'ansi' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'no-interaction' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }]; private $negations = ['no-ansi' => 'ansi']; private $shortcuts = ['h' => 'help', 'q' => 'quiet', 'v' => 'verbose', 'vv' => 'verbose', 'vvv' => 'verbose', 'V' => 'version', 'n' => 'no-interaction'] }) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Application.php:208
[29-Sep-2022 17:06:34 Europe/Paris] PHP   8. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parse() phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/Input.php:50
[29-Sep-2022 17:06:34 Europe/Paris] PHP   9. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parseToken($token = '-c', $parseOptions = TRUE) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:63
[29-Sep-2022 17:06:34 Europe/Paris] PHP  10. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parseShortOption($token = '-c') phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:75
[29-Sep-2022 17:06:34 Europe/Paris] PHP  11. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->addShortOption($shortcut = 'c', $value = NULL) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:95
[29-Sep-2022 17:06:52 Europe/Paris] PHP _PHPStan_3bfe2e67c\Symfony\Component\Console\Exception\RuntimeException:  The "-c" option does not exist. in phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php on line 181
[29-Sep-2022 17:06:52 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:06:52 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpstan:0
[29-Sep-2022 17:06:52 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpstan:120
[29-Sep-2022 17:06:52 Europe/Paris] PHP   3. require() D:\work-dir\console-options\vendor\phpstan\phpstan\phpstan:8
[29-Sep-2022 17:06:52 Europe/Paris] PHP   4. _PHPStan_3bfe2e67c\{closure:phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:13-125}() phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:125
[29-Sep-2022 17:06:52 Europe/Paris] PHP   5. _PHPStan_3bfe2e67c\Symfony\Component\Console\Application->run($input = *uninitialized*, $output = *uninitialized*) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:124
[29-Sep-2022 17:06:52 Europe/Paris] PHP   6. _PHPStan_3bfe2e67c\Symfony\Component\Console\Application->doRun($input = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput { protected $definition = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputDefinition { private $arguments = [...]; private $requiredCount = 1; private $lastArrayArgument = NULL; private $lastOptionalArgument = NULL; private $options = [...]; private $negations = [...]; private $shortcuts = [...] }; protected $stream = NULL; protected $options = []; protected $arguments = ['command' => 'analyze']; protected $interactive = FALSE; private $tokens = [0 => 'analyze', 1 => '-c', 2 => 'D:/work-dir/console-options/phpstan.neon', 3 => '--memory-limit=2G', 4 => '--error-format=checkstyle', 5 => '--no-progress', 6 => '--no-ansi', 7 => '--no-interaction', 8 => 'C:/Users/fabien.sanchez/AppData/Local/Temp/PHPStantemp_folder42780/src/OptionParser.php']; private $parsed = [0 => 'D:/work-dir/console-options/phpstan.neon', 1 => '--memory-limit=2G', 2 => '--error-format=checkstyle', 3 => '--no-progress', 4 => '--no-ansi', 5 => '--no-interaction', 6 => 'C:/Users/fabien.sanchez/AppData/Local/Temp/PHPStantemp_folder42780/src/OptionParser.php'] }, $output = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Output\ConsoleOutput { private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}verbosity = 32; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}formatter = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatter { private $decorated = FALSE; private $styles = [...]; private $styleStack = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatterStyleStack { ... } }; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\StreamOutput}stream = resource(2) of type (stream); private $stderr = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Output\StreamOutput { private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}verbosity = 32; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}formatter = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatter { ... }; private $stream = resource(3) of type (stream) }; private $consoleSectionOutputs = [] }) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Application.php:157
[29-Sep-2022 17:06:52 Europe/Paris] PHP   7. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\Input->bind($definition = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputDefinition { private $arguments = ['command' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputArgument { ... }]; private $requiredCount = 1; private $lastArrayArgument = NULL; private $lastOptionalArgument = NULL; private $options = ['help' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'quiet' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'verbose' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'version' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'ansi' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'no-interaction' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }]; private $negations = ['no-ansi' => 'ansi']; private $shortcuts = ['h' => 'help', 'q' => 'quiet', 'v' => 'verbose', 'vv' => 'verbose', 'vvv' => 'verbose', 'V' => 'version', 'n' => 'no-interaction'] }) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Application.php:208
[29-Sep-2022 17:06:52 Europe/Paris] PHP   8. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parse() phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/Input.php:50
[29-Sep-2022 17:06:52 Europe/Paris] PHP   9. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parseToken($token = '-c', $parseOptions = TRUE) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:63
[29-Sep-2022 17:06:52 Europe/Paris] PHP  10. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parseShortOption($token = '-c') phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:75
[29-Sep-2022 17:06:52 Europe/Paris] PHP  11. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->addShortOption($shortcut = 'c', $value = NULL) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:95
[29-Sep-2022 17:07:38 Europe/Paris] PHP _PHPStan_3bfe2e67c\Symfony\Component\Console\Exception\RuntimeException:  The "-c" option does not exist. in phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php on line 181
[29-Sep-2022 17:07:38 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:07:38 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpstan:0
[29-Sep-2022 17:07:38 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpstan:120
[29-Sep-2022 17:07:38 Europe/Paris] PHP   3. require() D:\work-dir\console-options\vendor\phpstan\phpstan\phpstan:8
[29-Sep-2022 17:07:38 Europe/Paris] PHP   4. _PHPStan_3bfe2e67c\{closure:phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:13-125}() phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:125
[29-Sep-2022 17:07:38 Europe/Paris] PHP   5. _PHPStan_3bfe2e67c\Symfony\Component\Console\Application->run($input = *uninitialized*, $output = *uninitialized*) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:124
[29-Sep-2022 17:07:38 Europe/Paris] PHP   6. _PHPStan_3bfe2e67c\Symfony\Component\Console\Application->doRun($input = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput { protected $definition = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputDefinition { private $arguments = [...]; private $requiredCount = 1; private $lastArrayArgument = NULL; private $lastOptionalArgument = NULL; private $options = [...]; private $negations = [...]; private $shortcuts = [...] }; protected $stream = NULL; protected $options = []; protected $arguments = ['command' => 'analyze']; protected $interactive = FALSE; private $tokens = [0 => 'analyze', 1 => '-c', 2 => 'D:/work-dir/console-options/phpstan.neon', 3 => '--memory-limit=2G', 4 => '--error-format=checkstyle', 5 => '--no-progress', 6 => '--no-ansi', 7 => '--no-interaction', 8 => 'C:/Users/fabien.sanchez/AppData/Local/Temp/PHPStantemp_folder60206/src/OptionParser.php']; private $parsed = [0 => 'D:/work-dir/console-options/phpstan.neon', 1 => '--memory-limit=2G', 2 => '--error-format=checkstyle', 3 => '--no-progress', 4 => '--no-ansi', 5 => '--no-interaction', 6 => 'C:/Users/fabien.sanchez/AppData/Local/Temp/PHPStantemp_folder60206/src/OptionParser.php'] }, $output = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Output\ConsoleOutput { private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}verbosity = 32; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}formatter = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatter { private $decorated = FALSE; private $styles = [...]; private $styleStack = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatterStyleStack { ... } }; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\StreamOutput}stream = resource(2) of type (stream); private $stderr = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Output\StreamOutput { private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}verbosity = 32; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}formatter = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatter { ... }; private $stream = resource(3) of type (stream) }; private $consoleSectionOutputs = [] }) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Application.php:157
[29-Sep-2022 17:07:38 Europe/Paris] PHP   7. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\Input->bind($definition = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputDefinition { private $arguments = ['command' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputArgument { ... }]; private $requiredCount = 1; private $lastArrayArgument = NULL; private $lastOptionalArgument = NULL; private $options = ['help' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'quiet' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'verbose' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'version' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'ansi' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'no-interaction' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }]; private $negations = ['no-ansi' => 'ansi']; private $shortcuts = ['h' => 'help', 'q' => 'quiet', 'v' => 'verbose', 'vv' => 'verbose', 'vvv' => 'verbose', 'V' => 'version', 'n' => 'no-interaction'] }) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Application.php:208
[29-Sep-2022 17:07:38 Europe/Paris] PHP   8. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parse() phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/Input.php:50
[29-Sep-2022 17:07:38 Europe/Paris] PHP   9. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parseToken($token = '-c', $parseOptions = TRUE) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:63
[29-Sep-2022 17:07:38 Europe/Paris] PHP  10. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parseShortOption($token = '-c') phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:75
[29-Sep-2022 17:07:38 Europe/Paris] PHP  11. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->addShortOption($shortcut = 'c', $value = NULL) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:95
[29-Sep-2022 17:07:42 Europe/Paris] PHP _PHPStan_3bfe2e67c\Symfony\Component\Console\Exception\RuntimeException:  The "-c" option does not exist. in phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php on line 181
[29-Sep-2022 17:07:42 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:07:42 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpstan:0
[29-Sep-2022 17:07:42 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpstan:120
[29-Sep-2022 17:07:42 Europe/Paris] PHP   3. require() D:\work-dir\console-options\vendor\phpstan\phpstan\phpstan:8
[29-Sep-2022 17:07:42 Europe/Paris] PHP   4. _PHPStan_3bfe2e67c\{closure:phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:13-125}() phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:125
[29-Sep-2022 17:07:42 Europe/Paris] PHP   5. _PHPStan_3bfe2e67c\Symfony\Component\Console\Application->run($input = *uninitialized*, $output = *uninitialized*) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:124
[29-Sep-2022 17:07:42 Europe/Paris] PHP   6. _PHPStan_3bfe2e67c\Symfony\Component\Console\Application->doRun($input = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput { protected $definition = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputDefinition { private $arguments = [...]; private $requiredCount = 1; private $lastArrayArgument = NULL; private $lastOptionalArgument = NULL; private $options = [...]; private $negations = [...]; private $shortcuts = [...] }; protected $stream = NULL; protected $options = []; protected $arguments = ['command' => 'analyze']; protected $interactive = FALSE; private $tokens = [0 => 'analyze', 1 => '-c', 2 => 'D:/work-dir/console-options/phpstan.neon', 3 => '--memory-limit=2G', 4 => '--error-format=checkstyle', 5 => '--no-progress', 6 => '--no-ansi', 7 => '--no-interaction', 8 => 'C:/Users/fabien.sanchez/AppData/Local/Temp/PHPStantemp_folder22968/src/OptionParser.php']; private $parsed = [0 => 'D:/work-dir/console-options/phpstan.neon', 1 => '--memory-limit=2G', 2 => '--error-format=checkstyle', 3 => '--no-progress', 4 => '--no-ansi', 5 => '--no-interaction', 6 => 'C:/Users/fabien.sanchez/AppData/Local/Temp/PHPStantemp_folder22968/src/OptionParser.php'] }, $output = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Output\ConsoleOutput { private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}verbosity = 32; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}formatter = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatter { private $decorated = FALSE; private $styles = [...]; private $styleStack = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatterStyleStack { ... } }; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\StreamOutput}stream = resource(2) of type (stream); private $stderr = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Output\StreamOutput { private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}verbosity = 32; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}formatter = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatter { ... }; private $stream = resource(3) of type (stream) }; private $consoleSectionOutputs = [] }) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Application.php:157
[29-Sep-2022 17:07:42 Europe/Paris] PHP   7. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\Input->bind($definition = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputDefinition { private $arguments = ['command' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputArgument { ... }]; private $requiredCount = 1; private $lastArrayArgument = NULL; private $lastOptionalArgument = NULL; private $options = ['help' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'quiet' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'verbose' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'version' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'ansi' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'no-interaction' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }]; private $negations = ['no-ansi' => 'ansi']; private $shortcuts = ['h' => 'help', 'q' => 'quiet', 'v' => 'verbose', 'vv' => 'verbose', 'vvv' => 'verbose', 'V' => 'version', 'n' => 'no-interaction'] }) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Application.php:208
[29-Sep-2022 17:07:42 Europe/Paris] PHP   8. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parse() phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/Input.php:50
[29-Sep-2022 17:07:42 Europe/Paris] PHP   9. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parseToken($token = '-c', $parseOptions = TRUE) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:63
[29-Sep-2022 17:07:42 Europe/Paris] PHP  10. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parseShortOption($token = '-c') phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:75
[29-Sep-2022 17:07:42 Europe/Paris] PHP  11. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->addShortOption($shortcut = 'c', $value = NULL) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:95
[29-Sep-2022 17:07:52 Europe/Paris] PHP _PHPStan_3bfe2e67c\Symfony\Component\Console\Exception\RuntimeException:  The "-c" option does not exist. in phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php on line 181
[29-Sep-2022 17:07:52 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:07:52 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpstan:0
[29-Sep-2022 17:07:52 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpstan:120
[29-Sep-2022 17:07:52 Europe/Paris] PHP   3. require() D:\work-dir\console-options\vendor\phpstan\phpstan\phpstan:8
[29-Sep-2022 17:07:52 Europe/Paris] PHP   4. _PHPStan_3bfe2e67c\{closure:phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:13-125}() phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:125
[29-Sep-2022 17:07:52 Europe/Paris] PHP   5. _PHPStan_3bfe2e67c\Symfony\Component\Console\Application->run($input = *uninitialized*, $output = *uninitialized*) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:124
[29-Sep-2022 17:07:52 Europe/Paris] PHP   6. _PHPStan_3bfe2e67c\Symfony\Component\Console\Application->doRun($input = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput { protected $definition = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputDefinition { private $arguments = [...]; private $requiredCount = 1; private $lastArrayArgument = NULL; private $lastOptionalArgument = NULL; private $options = [...]; private $negations = [...]; private $shortcuts = [...] }; protected $stream = NULL; protected $options = []; protected $arguments = ['command' => 'analyze']; protected $interactive = FALSE; private $tokens = [0 => 'analyze', 1 => '-c', 2 => 'D:/work-dir/console-options/phpstan.neon', 3 => '--memory-limit=2G', 4 => '--error-format=checkstyle', 5 => '--no-progress', 6 => '--no-ansi', 7 => '--no-interaction', 8 => 'C:/Users/fabien.sanchez/AppData/Local/Temp/PHPStantemp_folder8648/src/OptionParser.php']; private $parsed = [0 => 'D:/work-dir/console-options/phpstan.neon', 1 => '--memory-limit=2G', 2 => '--error-format=checkstyle', 3 => '--no-progress', 4 => '--no-ansi', 5 => '--no-interaction', 6 => 'C:/Users/fabien.sanchez/AppData/Local/Temp/PHPStantemp_folder8648/src/OptionParser.php'] }, $output = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Output\ConsoleOutput { private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}verbosity = 32; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}formatter = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatter { private $decorated = FALSE; private $styles = [...]; private $styleStack = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatterStyleStack { ... } }; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\StreamOutput}stream = resource(2) of type (stream); private $stderr = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Output\StreamOutput { private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}verbosity = 32; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}formatter = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatter { ... }; private $stream = resource(3) of type (stream) }; private $consoleSectionOutputs = [] }) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Application.php:157
[29-Sep-2022 17:07:52 Europe/Paris] PHP   7. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\Input->bind($definition = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputDefinition { private $arguments = ['command' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputArgument { ... }]; private $requiredCount = 1; private $lastArrayArgument = NULL; private $lastOptionalArgument = NULL; private $options = ['help' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'quiet' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'verbose' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'version' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'ansi' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'no-interaction' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }]; private $negations = ['no-ansi' => 'ansi']; private $shortcuts = ['h' => 'help', 'q' => 'quiet', 'v' => 'verbose', 'vv' => 'verbose', 'vvv' => 'verbose', 'V' => 'version', 'n' => 'no-interaction'] }) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Application.php:208
[29-Sep-2022 17:07:52 Europe/Paris] PHP   8. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parse() phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/Input.php:50
[29-Sep-2022 17:07:52 Europe/Paris] PHP   9. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parseToken($token = '-c', $parseOptions = TRUE) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:63
[29-Sep-2022 17:07:52 Europe/Paris] PHP  10. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parseShortOption($token = '-c') phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:75
[29-Sep-2022 17:07:52 Europe/Paris] PHP  11. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->addShortOption($shortcut = 'c', $value = NULL) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:95
[29-Sep-2022 17:08:02 Europe/Paris] PHP _PHPStan_3bfe2e67c\Symfony\Component\Console\Exception\RuntimeException:  The "-c" option does not exist. in phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php on line 181
[29-Sep-2022 17:08:02 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:08:02 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpstan:0
[29-Sep-2022 17:08:02 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpstan:120
[29-Sep-2022 17:08:02 Europe/Paris] PHP   3. require() D:\work-dir\console-options\vendor\phpstan\phpstan\phpstan:8
[29-Sep-2022 17:08:02 Europe/Paris] PHP   4. _PHPStan_3bfe2e67c\{closure:phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:13-125}() phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:125
[29-Sep-2022 17:08:02 Europe/Paris] PHP   5. _PHPStan_3bfe2e67c\Symfony\Component\Console\Application->run($input = *uninitialized*, $output = *uninitialized*) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:124
[29-Sep-2022 17:08:02 Europe/Paris] PHP   6. _PHPStan_3bfe2e67c\Symfony\Component\Console\Application->doRun($input = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput { protected $definition = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputDefinition { private $arguments = [...]; private $requiredCount = 1; private $lastArrayArgument = NULL; private $lastOptionalArgument = NULL; private $options = [...]; private $negations = [...]; private $shortcuts = [...] }; protected $stream = NULL; protected $options = []; protected $arguments = ['command' => 'analyze']; protected $interactive = FALSE; private $tokens = [0 => 'analyze', 1 => '-c', 2 => 'D:/work-dir/console-options/phpstan.neon', 3 => '--memory-limit=2G', 4 => '--error-format=checkstyle', 5 => '--no-progress', 6 => '--no-ansi', 7 => '--no-interaction', 8 => 'C:/Users/fabien.sanchez/AppData/Local/Temp/PHPStantemp_folder62740/src/OptionParser.php']; private $parsed = [0 => 'D:/work-dir/console-options/phpstan.neon', 1 => '--memory-limit=2G', 2 => '--error-format=checkstyle', 3 => '--no-progress', 4 => '--no-ansi', 5 => '--no-interaction', 6 => 'C:/Users/fabien.sanchez/AppData/Local/Temp/PHPStantemp_folder62740/src/OptionParser.php'] }, $output = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Output\ConsoleOutput { private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}verbosity = 32; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}formatter = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatter { private $decorated = FALSE; private $styles = [...]; private $styleStack = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatterStyleStack { ... } }; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\StreamOutput}stream = resource(2) of type (stream); private $stderr = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Output\StreamOutput { private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}verbosity = 32; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}formatter = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatter { ... }; private $stream = resource(3) of type (stream) }; private $consoleSectionOutputs = [] }) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Application.php:157
[29-Sep-2022 17:08:02 Europe/Paris] PHP   7. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\Input->bind($definition = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputDefinition { private $arguments = ['command' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputArgument { ... }]; private $requiredCount = 1; private $lastArrayArgument = NULL; private $lastOptionalArgument = NULL; private $options = ['help' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'quiet' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'verbose' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'version' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'ansi' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'no-interaction' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }]; private $negations = ['no-ansi' => 'ansi']; private $shortcuts = ['h' => 'help', 'q' => 'quiet', 'v' => 'verbose', 'vv' => 'verbose', 'vvv' => 'verbose', 'V' => 'version', 'n' => 'no-interaction'] }) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Application.php:208
[29-Sep-2022 17:08:02 Europe/Paris] PHP   8. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parse() phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/Input.php:50
[29-Sep-2022 17:08:02 Europe/Paris] PHP   9. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parseToken($token = '-c', $parseOptions = TRUE) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:63
[29-Sep-2022 17:08:02 Europe/Paris] PHP  10. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parseShortOption($token = '-c') phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:75
[29-Sep-2022 17:08:02 Europe/Paris] PHP  11. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->addShortOption($shortcut = 'c', $value = NULL) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:95
[29-Sep-2022 17:08:36 Europe/Paris] PHP _PHPStan_3bfe2e67c\Symfony\Component\Console\Exception\RuntimeException:  The "-c" option does not exist. in phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php on line 181
[29-Sep-2022 17:08:36 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:08:36 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpstan:0
[29-Sep-2022 17:08:36 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpstan:120
[29-Sep-2022 17:08:36 Europe/Paris] PHP   3. require() D:\work-dir\console-options\vendor\phpstan\phpstan\phpstan:8
[29-Sep-2022 17:08:36 Europe/Paris] PHP   4. _PHPStan_3bfe2e67c\{closure:phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:13-125}() phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:125
[29-Sep-2022 17:08:36 Europe/Paris] PHP   5. _PHPStan_3bfe2e67c\Symfony\Component\Console\Application->run($input = *uninitialized*, $output = *uninitialized*) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:124
[29-Sep-2022 17:08:36 Europe/Paris] PHP   6. _PHPStan_3bfe2e67c\Symfony\Component\Console\Application->doRun($input = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput { protected $definition = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputDefinition { private $arguments = [...]; private $requiredCount = 1; private $lastArrayArgument = NULL; private $lastOptionalArgument = NULL; private $options = [...]; private $negations = [...]; private $shortcuts = [...] }; protected $stream = NULL; protected $options = []; protected $arguments = ['command' => 'analyze']; protected $interactive = FALSE; private $tokens = [0 => 'analyze', 1 => '-c', 2 => 'D:/work-dir/console-options/phpstan.neon', 3 => '--memory-limit=2G', 4 => '--error-format=checkstyle', 5 => '--no-progress', 6 => '--no-ansi', 7 => '--no-interaction', 8 => 'C:/Users/fabien.sanchez/AppData/Local/Temp/PHPStantemp_folder120353/src/OptionParser.php']; private $parsed = [0 => 'D:/work-dir/console-options/phpstan.neon', 1 => '--memory-limit=2G', 2 => '--error-format=checkstyle', 3 => '--no-progress', 4 => '--no-ansi', 5 => '--no-interaction', 6 => 'C:/Users/fabien.sanchez/AppData/Local/Temp/PHPStantemp_folder120353/src/OptionParser.php'] }, $output = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Output\ConsoleOutput { private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}verbosity = 32; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}formatter = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatter { private $decorated = FALSE; private $styles = [...]; private $styleStack = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatterStyleStack { ... } }; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\StreamOutput}stream = resource(2) of type (stream); private $stderr = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Output\StreamOutput { private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}verbosity = 32; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}formatter = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatter { ... }; private $stream = resource(3) of type (stream) }; private $consoleSectionOutputs = [] }) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Application.php:157
[29-Sep-2022 17:08:36 Europe/Paris] PHP   7. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\Input->bind($definition = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputDefinition { private $arguments = ['command' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputArgument { ... }]; private $requiredCount = 1; private $lastArrayArgument = NULL; private $lastOptionalArgument = NULL; private $options = ['help' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'quiet' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'verbose' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'version' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'ansi' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'no-interaction' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }]; private $negations = ['no-ansi' => 'ansi']; private $shortcuts = ['h' => 'help', 'q' => 'quiet', 'v' => 'verbose', 'vv' => 'verbose', 'vvv' => 'verbose', 'V' => 'version', 'n' => 'no-interaction'] }) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Application.php:208
[29-Sep-2022 17:08:36 Europe/Paris] PHP   8. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parse() phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/Input.php:50
[29-Sep-2022 17:08:36 Europe/Paris] PHP   9. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parseToken($token = '-c', $parseOptions = TRUE) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:63
[29-Sep-2022 17:08:36 Europe/Paris] PHP  10. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parseShortOption($token = '-c') phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:75
[29-Sep-2022 17:08:36 Europe/Paris] PHP  11. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->addShortOption($shortcut = 'c', $value = NULL) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:95
[29-Sep-2022 17:29:02 Europe/Paris] PHP _PHPStan_3bfe2e67c\Symfony\Component\Console\Exception\RuntimeException:  The "-c" option does not exist. in phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php on line 181
[29-Sep-2022 17:29:02 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:29:02 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpstan:0
[29-Sep-2022 17:29:02 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpstan:120
[29-Sep-2022 17:29:02 Europe/Paris] PHP   3. require() D:\work-dir\console-options\vendor\phpstan\phpstan\phpstan:8
[29-Sep-2022 17:29:02 Europe/Paris] PHP   4. _PHPStan_3bfe2e67c\{closure:phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:13-125}() phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:125
[29-Sep-2022 17:29:02 Europe/Paris] PHP   5. _PHPStan_3bfe2e67c\Symfony\Component\Console\Application->run($input = *uninitialized*, $output = *uninitialized*) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:124
[29-Sep-2022 17:29:02 Europe/Paris] PHP   6. _PHPStan_3bfe2e67c\Symfony\Component\Console\Application->doRun($input = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput { protected $definition = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputDefinition { private $arguments = [...]; private $requiredCount = 1; private $lastArrayArgument = NULL; private $lastOptionalArgument = NULL; private $options = [...]; private $negations = [...]; private $shortcuts = [...] }; protected $stream = NULL; protected $options = []; protected $arguments = ['command' => 'analyze']; protected $interactive = FALSE; private $tokens = [0 => 'analyze', 1 => '-c', 2 => 'D:/work-dir/console-options/phpstan.neon', 3 => '--memory-limit=2G', 4 => '--error-format=checkstyle', 5 => '--no-progress', 6 => '--no-ansi', 7 => '--no-interaction', 8 => 'C:/Users/fabien.sanchez/AppData/Local/Temp/PHPStantemp_folder74763/src/OptionParser.php']; private $parsed = [0 => 'D:/work-dir/console-options/phpstan.neon', 1 => '--memory-limit=2G', 2 => '--error-format=checkstyle', 3 => '--no-progress', 4 => '--no-ansi', 5 => '--no-interaction', 6 => 'C:/Users/fabien.sanchez/AppData/Local/Temp/PHPStantemp_folder74763/src/OptionParser.php'] }, $output = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Output\ConsoleOutput { private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}verbosity = 32; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}formatter = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatter { private $decorated = FALSE; private $styles = [...]; private $styleStack = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatterStyleStack { ... } }; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\StreamOutput}stream = resource(2) of type (stream); private $stderr = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Output\StreamOutput { private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}verbosity = 32; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}formatter = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatter { ... }; private $stream = resource(3) of type (stream) }; private $consoleSectionOutputs = [] }) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Application.php:157
[29-Sep-2022 17:29:02 Europe/Paris] PHP   7. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\Input->bind($definition = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputDefinition { private $arguments = ['command' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputArgument { ... }]; private $requiredCount = 1; private $lastArrayArgument = NULL; private $lastOptionalArgument = NULL; private $options = ['help' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'quiet' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'verbose' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'version' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'ansi' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'no-interaction' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }]; private $negations = ['no-ansi' => 'ansi']; private $shortcuts = ['h' => 'help', 'q' => 'quiet', 'v' => 'verbose', 'vv' => 'verbose', 'vvv' => 'verbose', 'V' => 'version', 'n' => 'no-interaction'] }) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Application.php:208
[29-Sep-2022 17:29:02 Europe/Paris] PHP   8. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parse() phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/Input.php:50
[29-Sep-2022 17:29:02 Europe/Paris] PHP   9. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parseToken($token = '-c', $parseOptions = TRUE) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:63
[29-Sep-2022 17:29:02 Europe/Paris] PHP  10. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parseShortOption($token = '-c') phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:75
[29-Sep-2022 17:29:02 Europe/Paris] PHP  11. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->addShortOption($shortcut = 'c', $value = NULL) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:95
[29-Sep-2022 17:29:09 Europe/Paris] PHP _PHPStan_3bfe2e67c\Symfony\Component\Console\Exception\RuntimeException:  The "-c" option does not exist. in phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php on line 181
[29-Sep-2022 17:29:09 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:29:09 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpstan:0
[29-Sep-2022 17:29:09 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpstan:120
[29-Sep-2022 17:29:09 Europe/Paris] PHP   3. require() D:\work-dir\console-options\vendor\phpstan\phpstan\phpstan:8
[29-Sep-2022 17:29:09 Europe/Paris] PHP   4. _PHPStan_3bfe2e67c\{closure:phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:13-125}() phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:125
[29-Sep-2022 17:29:09 Europe/Paris] PHP   5. _PHPStan_3bfe2e67c\Symfony\Component\Console\Application->run($input = *uninitialized*, $output = *uninitialized*) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:124
[29-Sep-2022 17:29:09 Europe/Paris] PHP   6. _PHPStan_3bfe2e67c\Symfony\Component\Console\Application->doRun($input = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput { protected $definition = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputDefinition { private $arguments = [...]; private $requiredCount = 1; private $lastArrayArgument = NULL; private $lastOptionalArgument = NULL; private $options = [...]; private $negations = [...]; private $shortcuts = [...] }; protected $stream = NULL; protected $options = []; protected $arguments = ['command' => 'analyze']; protected $interactive = FALSE; private $tokens = [0 => 'analyze', 1 => '-c', 2 => 'D:/work-dir/console-options/phpstan.neon', 3 => '--memory-limit=2G', 4 => '--error-format=checkstyle', 5 => '--no-progress', 6 => '--no-ansi', 7 => '--no-interaction', 8 => 'C:/Users/fabien.sanchez/AppData/Local/Temp/PHPStantemp_folder122472/src/OptionParser.php']; private $parsed = [0 => 'D:/work-dir/console-options/phpstan.neon', 1 => '--memory-limit=2G', 2 => '--error-format=checkstyle', 3 => '--no-progress', 4 => '--no-ansi', 5 => '--no-interaction', 6 => 'C:/Users/fabien.sanchez/AppData/Local/Temp/PHPStantemp_folder122472/src/OptionParser.php'] }, $output = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Output\ConsoleOutput { private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}verbosity = 32; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}formatter = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatter { private $decorated = FALSE; private $styles = [...]; private $styleStack = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatterStyleStack { ... } }; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\StreamOutput}stream = resource(2) of type (stream); private $stderr = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Output\StreamOutput { private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}verbosity = 32; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}formatter = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatter { ... }; private $stream = resource(3) of type (stream) }; private $consoleSectionOutputs = [] }) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Application.php:157
[29-Sep-2022 17:29:09 Europe/Paris] PHP   7. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\Input->bind($definition = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputDefinition { private $arguments = ['command' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputArgument { ... }]; private $requiredCount = 1; private $lastArrayArgument = NULL; private $lastOptionalArgument = NULL; private $options = ['help' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'quiet' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'verbose' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'version' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'ansi' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'no-interaction' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }]; private $negations = ['no-ansi' => 'ansi']; private $shortcuts = ['h' => 'help', 'q' => 'quiet', 'v' => 'verbose', 'vv' => 'verbose', 'vvv' => 'verbose', 'V' => 'version', 'n' => 'no-interaction'] }) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Application.php:208
[29-Sep-2022 17:29:09 Europe/Paris] PHP   8. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parse() phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/Input.php:50
[29-Sep-2022 17:29:09 Europe/Paris] PHP   9. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parseToken($token = '-c', $parseOptions = TRUE) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:63
[29-Sep-2022 17:29:09 Europe/Paris] PHP  10. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parseShortOption($token = '-c') phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:75
[29-Sep-2022 17:29:09 Europe/Paris] PHP  11. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->addShortOption($shortcut = 'c', $value = NULL) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:95
[29-Sep-2022 17:29:27 Europe/Paris] PHP _PHPStan_3bfe2e67c\Symfony\Component\Console\Exception\RuntimeException:  The "-c" option does not exist. in phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php on line 181
[29-Sep-2022 17:29:27 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:29:27 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpstan:0
[29-Sep-2022 17:29:27 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpstan:120
[29-Sep-2022 17:29:27 Europe/Paris] PHP   3. require() D:\work-dir\console-options\vendor\phpstan\phpstan\phpstan:8
[29-Sep-2022 17:29:27 Europe/Paris] PHP   4. _PHPStan_3bfe2e67c\{closure:phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:13-125}() phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:125
[29-Sep-2022 17:29:27 Europe/Paris] PHP   5. _PHPStan_3bfe2e67c\Symfony\Component\Console\Application->run($input = *uninitialized*, $output = *uninitialized*) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:124
[29-Sep-2022 17:29:27 Europe/Paris] PHP   6. _PHPStan_3bfe2e67c\Symfony\Component\Console\Application->doRun($input = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput { protected $definition = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputDefinition { private $arguments = [...]; private $requiredCount = 1; private $lastArrayArgument = NULL; private $lastOptionalArgument = NULL; private $options = [...]; private $negations = [...]; private $shortcuts = [...] }; protected $stream = NULL; protected $options = []; protected $arguments = ['command' => 'analyze']; protected $interactive = FALSE; private $tokens = [0 => 'analyze', 1 => '-c', 2 => 'D:/work-dir/console-options/phpstan.neon', 3 => '--memory-limit=2G', 4 => '--error-format=checkstyle', 5 => '--no-progress', 6 => '--no-ansi', 7 => '--no-interaction', 8 => 'C:/Users/fabien.sanchez/AppData/Local/Temp/PHPStantemp_folder60944/test/OptionParserTest.php']; private $parsed = [0 => 'D:/work-dir/console-options/phpstan.neon', 1 => '--memory-limit=2G', 2 => '--error-format=checkstyle', 3 => '--no-progress', 4 => '--no-ansi', 5 => '--no-interaction', 6 => 'C:/Users/fabien.sanchez/AppData/Local/Temp/PHPStantemp_folder60944/test/OptionParserTest.php'] }, $output = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Output\ConsoleOutput { private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}verbosity = 32; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}formatter = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatter { private $decorated = FALSE; private $styles = [...]; private $styleStack = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatterStyleStack { ... } }; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\StreamOutput}stream = resource(2) of type (stream); private $stderr = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Output\StreamOutput { private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}verbosity = 32; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}formatter = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatter { ... }; private $stream = resource(3) of type (stream) }; private $consoleSectionOutputs = [] }) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Application.php:157
[29-Sep-2022 17:29:27 Europe/Paris] PHP   7. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\Input->bind($definition = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputDefinition { private $arguments = ['command' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputArgument { ... }]; private $requiredCount = 1; private $lastArrayArgument = NULL; private $lastOptionalArgument = NULL; private $options = ['help' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'quiet' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'verbose' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'version' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'ansi' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'no-interaction' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }]; private $negations = ['no-ansi' => 'ansi']; private $shortcuts = ['h' => 'help', 'q' => 'quiet', 'v' => 'verbose', 'vv' => 'verbose', 'vvv' => 'verbose', 'V' => 'version', 'n' => 'no-interaction'] }) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Application.php:208
[29-Sep-2022 17:29:27 Europe/Paris] PHP   8. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parse() phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/Input.php:50
[29-Sep-2022 17:29:27 Europe/Paris] PHP   9. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parseToken($token = '-c', $parseOptions = TRUE) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:63
[29-Sep-2022 17:29:27 Europe/Paris] PHP  10. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parseShortOption($token = '-c') phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:75
[29-Sep-2022 17:29:27 Europe/Paris] PHP  11. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->addShortOption($shortcut = 'c', $value = NULL) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:95
[29-Sep-2022 17:29:34 Europe/Paris] PHP _PHPStan_3bfe2e67c\Symfony\Component\Console\Exception\RuntimeException:  The "-c" option does not exist. in phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php on line 181
[29-Sep-2022 17:29:34 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:29:34 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpstan:0
[29-Sep-2022 17:29:34 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpstan:120
[29-Sep-2022 17:29:34 Europe/Paris] PHP   3. require() D:\work-dir\console-options\vendor\phpstan\phpstan\phpstan:8
[29-Sep-2022 17:29:34 Europe/Paris] PHP   4. _PHPStan_3bfe2e67c\{closure:phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:13-125}() phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:125
[29-Sep-2022 17:29:34 Europe/Paris] PHP   5. _PHPStan_3bfe2e67c\Symfony\Component\Console\Application->run($input = *uninitialized*, $output = *uninitialized*) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:124
[29-Sep-2022 17:29:34 Europe/Paris] PHP   6. _PHPStan_3bfe2e67c\Symfony\Component\Console\Application->doRun($input = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput { protected $definition = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputDefinition { private $arguments = [...]; private $requiredCount = 1; private $lastArrayArgument = NULL; private $lastOptionalArgument = NULL; private $options = [...]; private $negations = [...]; private $shortcuts = [...] }; protected $stream = NULL; protected $options = []; protected $arguments = ['command' => 'analyze']; protected $interactive = FALSE; private $tokens = [0 => 'analyze', 1 => '-c', 2 => 'D:/work-dir/console-options/phpstan.neon', 3 => '--memory-limit=2G', 4 => '--error-format=checkstyle', 5 => '--no-progress', 6 => '--no-ansi', 7 => '--no-interaction', 8 => 'C:/Users/fabien.sanchez/AppData/Local/Temp/PHPStantemp_folder29256/test/OptionParserTest.php']; private $parsed = [0 => 'D:/work-dir/console-options/phpstan.neon', 1 => '--memory-limit=2G', 2 => '--error-format=checkstyle', 3 => '--no-progress', 4 => '--no-ansi', 5 => '--no-interaction', 6 => 'C:/Users/fabien.sanchez/AppData/Local/Temp/PHPStantemp_folder29256/test/OptionParserTest.php'] }, $output = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Output\ConsoleOutput { private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}verbosity = 32; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}formatter = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatter { private $decorated = FALSE; private $styles = [...]; private $styleStack = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatterStyleStack { ... } }; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\StreamOutput}stream = resource(2) of type (stream); private $stderr = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Output\StreamOutput { private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}verbosity = 32; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}formatter = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatter { ... }; private $stream = resource(3) of type (stream) }; private $consoleSectionOutputs = [] }) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Application.php:157
[29-Sep-2022 17:29:34 Europe/Paris] PHP   7. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\Input->bind($definition = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputDefinition { private $arguments = ['command' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputArgument { ... }]; private $requiredCount = 1; private $lastArrayArgument = NULL; private $lastOptionalArgument = NULL; private $options = ['help' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'quiet' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'verbose' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'version' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'ansi' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'no-interaction' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }]; private $negations = ['no-ansi' => 'ansi']; private $shortcuts = ['h' => 'help', 'q' => 'quiet', 'v' => 'verbose', 'vv' => 'verbose', 'vvv' => 'verbose', 'V' => 'version', 'n' => 'no-interaction'] }) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Application.php:208
[29-Sep-2022 17:29:34 Europe/Paris] PHP   8. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parse() phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/Input.php:50
[29-Sep-2022 17:29:34 Europe/Paris] PHP   9. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parseToken($token = '-c', $parseOptions = TRUE) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:63
[29-Sep-2022 17:29:34 Europe/Paris] PHP  10. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parseShortOption($token = '-c') phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:75
[29-Sep-2022 17:29:34 Europe/Paris] PHP  11. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->addShortOption($shortcut = 'c', $value = NULL) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:95
[29-Sep-2022 17:29:39 Europe/Paris] PHP _PHPStan_3bfe2e67c\Symfony\Component\Console\Exception\RuntimeException:  The "-c" option does not exist. in phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php on line 181
[29-Sep-2022 17:29:39 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:29:39 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpstan:0
[29-Sep-2022 17:29:39 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpstan:120
[29-Sep-2022 17:29:39 Europe/Paris] PHP   3. require() D:\work-dir\console-options\vendor\phpstan\phpstan\phpstan:8
[29-Sep-2022 17:29:39 Europe/Paris] PHP   4. _PHPStan_3bfe2e67c\{closure:phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:13-125}() phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:125
[29-Sep-2022 17:29:39 Europe/Paris] PHP   5. _PHPStan_3bfe2e67c\Symfony\Component\Console\Application->run($input = *uninitialized*, $output = *uninitialized*) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:124
[29-Sep-2022 17:29:39 Europe/Paris] PHP   6. _PHPStan_3bfe2e67c\Symfony\Component\Console\Application->doRun($input = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput { protected $definition = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputDefinition { private $arguments = [...]; private $requiredCount = 1; private $lastArrayArgument = NULL; private $lastOptionalArgument = NULL; private $options = [...]; private $negations = [...]; private $shortcuts = [...] }; protected $stream = NULL; protected $options = []; protected $arguments = ['command' => 'analyze']; protected $interactive = FALSE; private $tokens = [0 => 'analyze', 1 => '-c', 2 => 'D:/work-dir/console-options/phpstan.neon', 3 => '--memory-limit=2G', 4 => '--error-format=checkstyle', 5 => '--no-progress', 6 => '--no-ansi', 7 => '--no-interaction', 8 => 'C:/Users/fabien.sanchez/AppData/Local/Temp/PHPStantemp_folder124580/test/OptionParserTest.php']; private $parsed = [0 => 'D:/work-dir/console-options/phpstan.neon', 1 => '--memory-limit=2G', 2 => '--error-format=checkstyle', 3 => '--no-progress', 4 => '--no-ansi', 5 => '--no-interaction', 6 => 'C:/Users/fabien.sanchez/AppData/Local/Temp/PHPStantemp_folder124580/test/OptionParserTest.php'] }, $output = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Output\ConsoleOutput { private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}verbosity = 32; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}formatter = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatter { private $decorated = FALSE; private $styles = [...]; private $styleStack = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatterStyleStack { ... } }; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\StreamOutput}stream = resource(2) of type (stream); private $stderr = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Output\StreamOutput { private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}verbosity = 32; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}formatter = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatter { ... }; private $stream = resource(3) of type (stream) }; private $consoleSectionOutputs = [] }) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Application.php:157
[29-Sep-2022 17:29:39 Europe/Paris] PHP   7. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\Input->bind($definition = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputDefinition { private $arguments = ['command' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputArgument { ... }]; private $requiredCount = 1; private $lastArrayArgument = NULL; private $lastOptionalArgument = NULL; private $options = ['help' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'quiet' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'verbose' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'version' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'ansi' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'no-interaction' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }]; private $negations = ['no-ansi' => 'ansi']; private $shortcuts = ['h' => 'help', 'q' => 'quiet', 'v' => 'verbose', 'vv' => 'verbose', 'vvv' => 'verbose', 'V' => 'version', 'n' => 'no-interaction'] }) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Application.php:208
[29-Sep-2022 17:29:39 Europe/Paris] PHP   8. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parse() phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/Input.php:50
[29-Sep-2022 17:29:39 Europe/Paris] PHP   9. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parseToken($token = '-c', $parseOptions = TRUE) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:63
[29-Sep-2022 17:29:39 Europe/Paris] PHP  10. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parseShortOption($token = '-c') phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:75
[29-Sep-2022 17:29:39 Europe/Paris] PHP  11. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->addShortOption($shortcut = 'c', $value = NULL) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:95
[29-Sep-2022 17:29:44 Europe/Paris] PHP _PHPStan_3bfe2e67c\Symfony\Component\Console\Exception\RuntimeException:  The "-c" option does not exist. in phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php on line 181
[29-Sep-2022 17:29:44 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:29:44 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpstan:0
[29-Sep-2022 17:29:44 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpstan:120
[29-Sep-2022 17:29:44 Europe/Paris] PHP   3. require() D:\work-dir\console-options\vendor\phpstan\phpstan\phpstan:8
[29-Sep-2022 17:29:44 Europe/Paris] PHP   4. _PHPStan_3bfe2e67c\{closure:phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:13-125}() phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:125
[29-Sep-2022 17:29:44 Europe/Paris] PHP   5. _PHPStan_3bfe2e67c\Symfony\Component\Console\Application->run($input = *uninitialized*, $output = *uninitialized*) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:124
[29-Sep-2022 17:29:44 Europe/Paris] PHP   6. _PHPStan_3bfe2e67c\Symfony\Component\Console\Application->doRun($input = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput { protected $definition = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputDefinition { private $arguments = [...]; private $requiredCount = 1; private $lastArrayArgument = NULL; private $lastOptionalArgument = NULL; private $options = [...]; private $negations = [...]; private $shortcuts = [...] }; protected $stream = NULL; protected $options = []; protected $arguments = ['command' => 'analyze']; protected $interactive = FALSE; private $tokens = [0 => 'analyze', 1 => '-c', 2 => 'D:/work-dir/console-options/phpstan.neon', 3 => '--memory-limit=2G', 4 => '--error-format=checkstyle', 5 => '--no-progress', 6 => '--no-ansi', 7 => '--no-interaction', 8 => 'C:/Users/fabien.sanchez/AppData/Local/Temp/PHPStantemp_folder115661/test/OptionParserTest.php']; private $parsed = [0 => 'D:/work-dir/console-options/phpstan.neon', 1 => '--memory-limit=2G', 2 => '--error-format=checkstyle', 3 => '--no-progress', 4 => '--no-ansi', 5 => '--no-interaction', 6 => 'C:/Users/fabien.sanchez/AppData/Local/Temp/PHPStantemp_folder115661/test/OptionParserTest.php'] }, $output = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Output\ConsoleOutput { private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}verbosity = 32; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}formatter = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatter { private $decorated = FALSE; private $styles = [...]; private $styleStack = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatterStyleStack { ... } }; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\StreamOutput}stream = resource(2) of type (stream); private $stderr = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Output\StreamOutput { private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}verbosity = 32; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}formatter = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatter { ... }; private $stream = resource(3) of type (stream) }; private $consoleSectionOutputs = [] }) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Application.php:157
[29-Sep-2022 17:29:44 Europe/Paris] PHP   7. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\Input->bind($definition = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputDefinition { private $arguments = ['command' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputArgument { ... }]; private $requiredCount = 1; private $lastArrayArgument = NULL; private $lastOptionalArgument = NULL; private $options = ['help' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'quiet' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'verbose' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'version' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'ansi' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'no-interaction' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }]; private $negations = ['no-ansi' => 'ansi']; private $shortcuts = ['h' => 'help', 'q' => 'quiet', 'v' => 'verbose', 'vv' => 'verbose', 'vvv' => 'verbose', 'V' => 'version', 'n' => 'no-interaction'] }) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Application.php:208
[29-Sep-2022 17:29:44 Europe/Paris] PHP   8. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parse() phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/Input.php:50
[29-Sep-2022 17:29:44 Europe/Paris] PHP   9. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parseToken($token = '-c', $parseOptions = TRUE) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:63
[29-Sep-2022 17:29:44 Europe/Paris] PHP  10. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parseShortOption($token = '-c') phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:75
[29-Sep-2022 17:29:44 Europe/Paris] PHP  11. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->addShortOption($shortcut = 'c', $value = NULL) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:95
[29-Sep-2022 17:29:49 Europe/Paris] PHP _PHPStan_3bfe2e67c\Symfony\Component\Console\Exception\RuntimeException:  The "-c" option does not exist. in phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php on line 181
[29-Sep-2022 17:29:49 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:29:49 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpstan:0
[29-Sep-2022 17:29:49 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpstan:120
[29-Sep-2022 17:29:49 Europe/Paris] PHP   3. require() D:\work-dir\console-options\vendor\phpstan\phpstan\phpstan:8
[29-Sep-2022 17:29:49 Europe/Paris] PHP   4. _PHPStan_3bfe2e67c\{closure:phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:13-125}() phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:125
[29-Sep-2022 17:29:49 Europe/Paris] PHP   5. _PHPStan_3bfe2e67c\Symfony\Component\Console\Application->run($input = *uninitialized*, $output = *uninitialized*) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:124
[29-Sep-2022 17:29:49 Europe/Paris] PHP   6. _PHPStan_3bfe2e67c\Symfony\Component\Console\Application->doRun($input = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput { protected $definition = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputDefinition { private $arguments = [...]; private $requiredCount = 1; private $lastArrayArgument = NULL; private $lastOptionalArgument = NULL; private $options = [...]; private $negations = [...]; private $shortcuts = [...] }; protected $stream = NULL; protected $options = []; protected $arguments = ['command' => 'analyze']; protected $interactive = FALSE; private $tokens = [0 => 'analyze', 1 => '-c', 2 => 'D:/work-dir/console-options/phpstan.neon', 3 => '--memory-limit=2G', 4 => '--error-format=checkstyle', 5 => '--no-progress', 6 => '--no-ansi', 7 => '--no-interaction', 8 => 'C:/Users/fabien.sanchez/AppData/Local/Temp/PHPStantemp_folder114355/test/OptionParserTest.php']; private $parsed = [0 => 'D:/work-dir/console-options/phpstan.neon', 1 => '--memory-limit=2G', 2 => '--error-format=checkstyle', 3 => '--no-progress', 4 => '--no-ansi', 5 => '--no-interaction', 6 => 'C:/Users/fabien.sanchez/AppData/Local/Temp/PHPStantemp_folder114355/test/OptionParserTest.php'] }, $output = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Output\ConsoleOutput { private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}verbosity = 32; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}formatter = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatter { private $decorated = FALSE; private $styles = [...]; private $styleStack = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatterStyleStack { ... } }; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\StreamOutput}stream = resource(2) of type (stream); private $stderr = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Output\StreamOutput { private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}verbosity = 32; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}formatter = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatter { ... }; private $stream = resource(3) of type (stream) }; private $consoleSectionOutputs = [] }) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Application.php:157
[29-Sep-2022 17:29:49 Europe/Paris] PHP   7. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\Input->bind($definition = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputDefinition { private $arguments = ['command' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputArgument { ... }]; private $requiredCount = 1; private $lastArrayArgument = NULL; private $lastOptionalArgument = NULL; private $options = ['help' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'quiet' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'verbose' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'version' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'ansi' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'no-interaction' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }]; private $negations = ['no-ansi' => 'ansi']; private $shortcuts = ['h' => 'help', 'q' => 'quiet', 'v' => 'verbose', 'vv' => 'verbose', 'vvv' => 'verbose', 'V' => 'version', 'n' => 'no-interaction'] }) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Application.php:208
[29-Sep-2022 17:29:49 Europe/Paris] PHP   8. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parse() phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/Input.php:50
[29-Sep-2022 17:29:49 Europe/Paris] PHP   9. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parseToken($token = '-c', $parseOptions = TRUE) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:63
[29-Sep-2022 17:29:49 Europe/Paris] PHP  10. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parseShortOption($token = '-c') phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:75
[29-Sep-2022 17:29:49 Europe/Paris] PHP  11. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->addShortOption($shortcut = 'c', $value = NULL) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:95
[29-Sep-2022 17:29:55 Europe/Paris] PHP _PHPStan_3bfe2e67c\Symfony\Component\Console\Exception\RuntimeException:  The "-c" option does not exist. in phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php on line 181
[29-Sep-2022 17:29:55 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:29:55 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpstan:0
[29-Sep-2022 17:29:55 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpstan:120
[29-Sep-2022 17:29:55 Europe/Paris] PHP   3. require() D:\work-dir\console-options\vendor\phpstan\phpstan\phpstan:8
[29-Sep-2022 17:29:55 Europe/Paris] PHP   4. _PHPStan_3bfe2e67c\{closure:phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:13-125}() phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:125
[29-Sep-2022 17:29:55 Europe/Paris] PHP   5. _PHPStan_3bfe2e67c\Symfony\Component\Console\Application->run($input = *uninitialized*, $output = *uninitialized*) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:124
[29-Sep-2022 17:29:55 Europe/Paris] PHP   6. _PHPStan_3bfe2e67c\Symfony\Component\Console\Application->doRun($input = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput { protected $definition = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputDefinition { private $arguments = [...]; private $requiredCount = 1; private $lastArrayArgument = NULL; private $lastOptionalArgument = NULL; private $options = [...]; private $negations = [...]; private $shortcuts = [...] }; protected $stream = NULL; protected $options = []; protected $arguments = ['command' => 'analyze']; protected $interactive = FALSE; private $tokens = [0 => 'analyze', 1 => '-c', 2 => 'D:/work-dir/console-options/phpstan.neon', 3 => '--memory-limit=2G', 4 => '--error-format=checkstyle', 5 => '--no-progress', 6 => '--no-ansi', 7 => '--no-interaction', 8 => 'C:/Users/fabien.sanchez/AppData/Local/Temp/PHPStantemp_folder20328/test/OptionParserTest.php']; private $parsed = [0 => 'D:/work-dir/console-options/phpstan.neon', 1 => '--memory-limit=2G', 2 => '--error-format=checkstyle', 3 => '--no-progress', 4 => '--no-ansi', 5 => '--no-interaction', 6 => 'C:/Users/fabien.sanchez/AppData/Local/Temp/PHPStantemp_folder20328/test/OptionParserTest.php'] }, $output = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Output\ConsoleOutput { private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}verbosity = 32; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}formatter = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatter { private $decorated = FALSE; private $styles = [...]; private $styleStack = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatterStyleStack { ... } }; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\StreamOutput}stream = resource(2) of type (stream); private $stderr = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Output\StreamOutput { private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}verbosity = 32; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}formatter = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatter { ... }; private $stream = resource(3) of type (stream) }; private $consoleSectionOutputs = [] }) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Application.php:157
[29-Sep-2022 17:29:55 Europe/Paris] PHP   7. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\Input->bind($definition = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputDefinition { private $arguments = ['command' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputArgument { ... }]; private $requiredCount = 1; private $lastArrayArgument = NULL; private $lastOptionalArgument = NULL; private $options = ['help' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'quiet' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'verbose' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'version' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'ansi' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'no-interaction' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }]; private $negations = ['no-ansi' => 'ansi']; private $shortcuts = ['h' => 'help', 'q' => 'quiet', 'v' => 'verbose', 'vv' => 'verbose', 'vvv' => 'verbose', 'V' => 'version', 'n' => 'no-interaction'] }) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Application.php:208
[29-Sep-2022 17:29:55 Europe/Paris] PHP   8. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parse() phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/Input.php:50
[29-Sep-2022 17:29:55 Europe/Paris] PHP   9. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parseToken($token = '-c', $parseOptions = TRUE) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:63
[29-Sep-2022 17:29:55 Europe/Paris] PHP  10. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parseShortOption($token = '-c') phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:75
[29-Sep-2022 17:29:55 Europe/Paris] PHP  11. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->addShortOption($shortcut = 'c', $value = NULL) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:95
[29-Sep-2022 17:30:00 Europe/Paris] PHP _PHPStan_3bfe2e67c\Symfony\Component\Console\Exception\RuntimeException:  The "-c" option does not exist. in phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php on line 181
[29-Sep-2022 17:30:00 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:30:00 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpstan:0
[29-Sep-2022 17:30:00 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpstan:120
[29-Sep-2022 17:30:00 Europe/Paris] PHP   3. require() D:\work-dir\console-options\vendor\phpstan\phpstan\phpstan:8
[29-Sep-2022 17:30:00 Europe/Paris] PHP   4. _PHPStan_3bfe2e67c\{closure:phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:13-125}() phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:125
[29-Sep-2022 17:30:00 Europe/Paris] PHP   5. _PHPStan_3bfe2e67c\Symfony\Component\Console\Application->run($input = *uninitialized*, $output = *uninitialized*) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:124
[29-Sep-2022 17:30:00 Europe/Paris] PHP   6. _PHPStan_3bfe2e67c\Symfony\Component\Console\Application->doRun($input = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput { protected $definition = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputDefinition { private $arguments = [...]; private $requiredCount = 1; private $lastArrayArgument = NULL; private $lastOptionalArgument = NULL; private $options = [...]; private $negations = [...]; private $shortcuts = [...] }; protected $stream = NULL; protected $options = []; protected $arguments = ['command' => 'analyze']; protected $interactive = FALSE; private $tokens = [0 => 'analyze', 1 => '-c', 2 => 'D:/work-dir/console-options/phpstan.neon', 3 => '--memory-limit=2G', 4 => '--error-format=checkstyle', 5 => '--no-progress', 6 => '--no-ansi', 7 => '--no-interaction', 8 => 'C:/Users/fabien.sanchez/AppData/Local/Temp/PHPStantemp_folder104244/test/OptionParserTest.php']; private $parsed = [0 => 'D:/work-dir/console-options/phpstan.neon', 1 => '--memory-limit=2G', 2 => '--error-format=checkstyle', 3 => '--no-progress', 4 => '--no-ansi', 5 => '--no-interaction', 6 => 'C:/Users/fabien.sanchez/AppData/Local/Temp/PHPStantemp_folder104244/test/OptionParserTest.php'] }, $output = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Output\ConsoleOutput { private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}verbosity = 32; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}formatter = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatter { private $decorated = FALSE; private $styles = [...]; private $styleStack = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatterStyleStack { ... } }; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\StreamOutput}stream = resource(2) of type (stream); private $stderr = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Output\StreamOutput { private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}verbosity = 32; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}formatter = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatter { ... }; private $stream = resource(3) of type (stream) }; private $consoleSectionOutputs = [] }) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Application.php:157
[29-Sep-2022 17:30:00 Europe/Paris] PHP   7. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\Input->bind($definition = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputDefinition { private $arguments = ['command' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputArgument { ... }]; private $requiredCount = 1; private $lastArrayArgument = NULL; private $lastOptionalArgument = NULL; private $options = ['help' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'quiet' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'verbose' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'version' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'ansi' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'no-interaction' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }]; private $negations = ['no-ansi' => 'ansi']; private $shortcuts = ['h' => 'help', 'q' => 'quiet', 'v' => 'verbose', 'vv' => 'verbose', 'vvv' => 'verbose', 'V' => 'version', 'n' => 'no-interaction'] }) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Application.php:208
[29-Sep-2022 17:30:00 Europe/Paris] PHP   8. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parse() phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/Input.php:50
[29-Sep-2022 17:30:00 Europe/Paris] PHP   9. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parseToken($token = '-c', $parseOptions = TRUE) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:63
[29-Sep-2022 17:30:00 Europe/Paris] PHP  10. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parseShortOption($token = '-c') phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:75
[29-Sep-2022 17:30:00 Europe/Paris] PHP  11. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->addShortOption($shortcut = 'c', $value = NULL) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:95
[29-Sep-2022 17:30:05 Europe/Paris] PHP _PHPStan_3bfe2e67c\Symfony\Component\Console\Exception\RuntimeException:  The "-c" option does not exist. in phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php on line 181
[29-Sep-2022 17:30:05 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:30:05 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpstan:0
[29-Sep-2022 17:30:05 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpstan:120
[29-Sep-2022 17:30:05 Europe/Paris] PHP   3. require() D:\work-dir\console-options\vendor\phpstan\phpstan\phpstan:8
[29-Sep-2022 17:30:05 Europe/Paris] PHP   4. _PHPStan_3bfe2e67c\{closure:phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:13-125}() phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:125
[29-Sep-2022 17:30:05 Europe/Paris] PHP   5. _PHPStan_3bfe2e67c\Symfony\Component\Console\Application->run($input = *uninitialized*, $output = *uninitialized*) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:124
[29-Sep-2022 17:30:05 Europe/Paris] PHP   6. _PHPStan_3bfe2e67c\Symfony\Component\Console\Application->doRun($input = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput { protected $definition = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputDefinition { private $arguments = [...]; private $requiredCount = 1; private $lastArrayArgument = NULL; private $lastOptionalArgument = NULL; private $options = [...]; private $negations = [...]; private $shortcuts = [...] }; protected $stream = NULL; protected $options = []; protected $arguments = ['command' => 'analyze']; protected $interactive = FALSE; private $tokens = [0 => 'analyze', 1 => '-c', 2 => 'D:/work-dir/console-options/phpstan.neon', 3 => '--memory-limit=2G', 4 => '--error-format=checkstyle', 5 => '--no-progress', 6 => '--no-ansi', 7 => '--no-interaction', 8 => 'C:/Users/fabien.sanchez/AppData/Local/Temp/PHPStantemp_folder24327/test/OptionParserTest.php']; private $parsed = [0 => 'D:/work-dir/console-options/phpstan.neon', 1 => '--memory-limit=2G', 2 => '--error-format=checkstyle', 3 => '--no-progress', 4 => '--no-ansi', 5 => '--no-interaction', 6 => 'C:/Users/fabien.sanchez/AppData/Local/Temp/PHPStantemp_folder24327/test/OptionParserTest.php'] }, $output = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Output\ConsoleOutput { private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}verbosity = 32; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}formatter = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatter { private $decorated = FALSE; private $styles = [...]; private $styleStack = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatterStyleStack { ... } }; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\StreamOutput}stream = resource(2) of type (stream); private $stderr = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Output\StreamOutput { private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}verbosity = 32; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}formatter = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatter { ... }; private $stream = resource(3) of type (stream) }; private $consoleSectionOutputs = [] }) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Application.php:157
[29-Sep-2022 17:30:05 Europe/Paris] PHP   7. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\Input->bind($definition = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputDefinition { private $arguments = ['command' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputArgument { ... }]; private $requiredCount = 1; private $lastArrayArgument = NULL; private $lastOptionalArgument = NULL; private $options = ['help' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'quiet' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'verbose' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'version' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'ansi' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'no-interaction' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }]; private $negations = ['no-ansi' => 'ansi']; private $shortcuts = ['h' => 'help', 'q' => 'quiet', 'v' => 'verbose', 'vv' => 'verbose', 'vvv' => 'verbose', 'V' => 'version', 'n' => 'no-interaction'] }) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Application.php:208
[29-Sep-2022 17:30:05 Europe/Paris] PHP   8. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parse() phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/Input.php:50
[29-Sep-2022 17:30:05 Europe/Paris] PHP   9. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parseToken($token = '-c', $parseOptions = TRUE) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:63
[29-Sep-2022 17:30:05 Europe/Paris] PHP  10. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parseShortOption($token = '-c') phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:75
[29-Sep-2022 17:30:05 Europe/Paris] PHP  11. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->addShortOption($shortcut = 'c', $value = NULL) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:95
[29-Sep-2022 17:30:23 Europe/Paris] PHP _PHPStan_3bfe2e67c\Symfony\Component\Console\Exception\RuntimeException:  The "-c" option does not exist. in phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php on line 181
[29-Sep-2022 17:30:23 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:30:23 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpstan:0
[29-Sep-2022 17:30:23 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpstan:120
[29-Sep-2022 17:30:23 Europe/Paris] PHP   3. require() D:\work-dir\console-options\vendor\phpstan\phpstan\phpstan:8
[29-Sep-2022 17:30:23 Europe/Paris] PHP   4. _PHPStan_3bfe2e67c\{closure:phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:13-125}() phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:125
[29-Sep-2022 17:30:23 Europe/Paris] PHP   5. _PHPStan_3bfe2e67c\Symfony\Component\Console\Application->run($input = *uninitialized*, $output = *uninitialized*) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:124
[29-Sep-2022 17:30:23 Europe/Paris] PHP   6. _PHPStan_3bfe2e67c\Symfony\Component\Console\Application->doRun($input = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput { protected $definition = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputDefinition { private $arguments = [...]; private $requiredCount = 1; private $lastArrayArgument = NULL; private $lastOptionalArgument = NULL; private $options = [...]; private $negations = [...]; private $shortcuts = [...] }; protected $stream = NULL; protected $options = []; protected $arguments = ['command' => 'analyze']; protected $interactive = FALSE; private $tokens = [0 => 'analyze', 1 => '-c', 2 => 'D:/work-dir/console-options/phpstan.neon', 3 => '--memory-limit=2G', 4 => '--error-format=checkstyle', 5 => '--no-progress', 6 => '--no-ansi', 7 => '--no-interaction', 8 => 'C:/Users/fabien.sanchez/AppData/Local/Temp/PHPStantemp_folder69945/test/OptionTest.php']; private $parsed = [0 => 'D:/work-dir/console-options/phpstan.neon', 1 => '--memory-limit=2G', 2 => '--error-format=checkstyle', 3 => '--no-progress', 4 => '--no-ansi', 5 => '--no-interaction', 6 => 'C:/Users/fabien.sanchez/AppData/Local/Temp/PHPStantemp_folder69945/test/OptionTest.php'] }, $output = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Output\ConsoleOutput { private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}verbosity = 32; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}formatter = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatter { private $decorated = FALSE; private $styles = [...]; private $styleStack = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatterStyleStack { ... } }; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\StreamOutput}stream = resource(2) of type (stream); private $stderr = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Output\StreamOutput { private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}verbosity = 32; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}formatter = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatter { ... }; private $stream = resource(3) of type (stream) }; private $consoleSectionOutputs = [] }) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Application.php:157
[29-Sep-2022 17:30:23 Europe/Paris] PHP   7. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\Input->bind($definition = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputDefinition { private $arguments = ['command' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputArgument { ... }]; private $requiredCount = 1; private $lastArrayArgument = NULL; private $lastOptionalArgument = NULL; private $options = ['help' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'quiet' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'verbose' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'version' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'ansi' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'no-interaction' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }]; private $negations = ['no-ansi' => 'ansi']; private $shortcuts = ['h' => 'help', 'q' => 'quiet', 'v' => 'verbose', 'vv' => 'verbose', 'vvv' => 'verbose', 'V' => 'version', 'n' => 'no-interaction'] }) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Application.php:208
[29-Sep-2022 17:30:23 Europe/Paris] PHP   8. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parse() phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/Input.php:50
[29-Sep-2022 17:30:23 Europe/Paris] PHP   9. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parseToken($token = '-c', $parseOptions = TRUE) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:63
[29-Sep-2022 17:30:23 Europe/Paris] PHP  10. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parseShortOption($token = '-c') phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:75
[29-Sep-2022 17:30:23 Europe/Paris] PHP  11. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->addShortOption($shortcut = 'c', $value = NULL) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:95
[29-Sep-2022 17:30:28 Europe/Paris] PHP _PHPStan_3bfe2e67c\Symfony\Component\Console\Exception\RuntimeException:  The "-c" option does not exist. in phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php on line 181
[29-Sep-2022 17:30:28 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:30:28 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpstan:0
[29-Sep-2022 17:30:28 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpstan:120
[29-Sep-2022 17:30:28 Europe/Paris] PHP   3. require() D:\work-dir\console-options\vendor\phpstan\phpstan\phpstan:8
[29-Sep-2022 17:30:28 Europe/Paris] PHP   4. _PHPStan_3bfe2e67c\{closure:phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:13-125}() phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:125
[29-Sep-2022 17:30:28 Europe/Paris] PHP   5. _PHPStan_3bfe2e67c\Symfony\Component\Console\Application->run($input = *uninitialized*, $output = *uninitialized*) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:124
[29-Sep-2022 17:30:28 Europe/Paris] PHP   6. _PHPStan_3bfe2e67c\Symfony\Component\Console\Application->doRun($input = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput { protected $definition = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputDefinition { private $arguments = [...]; private $requiredCount = 1; private $lastArrayArgument = NULL; private $lastOptionalArgument = NULL; private $options = [...]; private $negations = [...]; private $shortcuts = [...] }; protected $stream = NULL; protected $options = []; protected $arguments = ['command' => 'analyze']; protected $interactive = FALSE; private $tokens = [0 => 'analyze', 1 => '-c', 2 => 'D:/work-dir/console-options/phpstan.neon', 3 => '--memory-limit=2G', 4 => '--error-format=checkstyle', 5 => '--no-progress', 6 => '--no-ansi', 7 => '--no-interaction', 8 => 'C:/Users/fabien.sanchez/AppData/Local/Temp/PHPStantemp_folder25176/test/OptionTest.php']; private $parsed = [0 => 'D:/work-dir/console-options/phpstan.neon', 1 => '--memory-limit=2G', 2 => '--error-format=checkstyle', 3 => '--no-progress', 4 => '--no-ansi', 5 => '--no-interaction', 6 => 'C:/Users/fabien.sanchez/AppData/Local/Temp/PHPStantemp_folder25176/test/OptionTest.php'] }, $output = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Output\ConsoleOutput { private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}verbosity = 32; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}formatter = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatter { private $decorated = FALSE; private $styles = [...]; private $styleStack = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatterStyleStack { ... } }; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\StreamOutput}stream = resource(2) of type (stream); private $stderr = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Output\StreamOutput { private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}verbosity = 32; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}formatter = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatter { ... }; private $stream = resource(3) of type (stream) }; private $consoleSectionOutputs = [] }) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Application.php:157
[29-Sep-2022 17:30:28 Europe/Paris] PHP   7. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\Input->bind($definition = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputDefinition { private $arguments = ['command' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputArgument { ... }]; private $requiredCount = 1; private $lastArrayArgument = NULL; private $lastOptionalArgument = NULL; private $options = ['help' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'quiet' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'verbose' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'version' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'ansi' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'no-interaction' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }]; private $negations = ['no-ansi' => 'ansi']; private $shortcuts = ['h' => 'help', 'q' => 'quiet', 'v' => 'verbose', 'vv' => 'verbose', 'vvv' => 'verbose', 'V' => 'version', 'n' => 'no-interaction'] }) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Application.php:208
[29-Sep-2022 17:30:28 Europe/Paris] PHP   8. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parse() phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/Input.php:50
[29-Sep-2022 17:30:28 Europe/Paris] PHP   9. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parseToken($token = '-c', $parseOptions = TRUE) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:63
[29-Sep-2022 17:30:28 Europe/Paris] PHP  10. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parseShortOption($token = '-c') phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:75
[29-Sep-2022 17:30:28 Europe/Paris] PHP  11. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->addShortOption($shortcut = 'c', $value = NULL) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:95
[29-Sep-2022 17:30:33 Europe/Paris] PHP _PHPStan_3bfe2e67c\Symfony\Component\Console\Exception\RuntimeException:  The "-c" option does not exist. in phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php on line 181
[29-Sep-2022 17:30:33 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:30:33 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpstan:0
[29-Sep-2022 17:30:33 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpstan:120
[29-Sep-2022 17:30:33 Europe/Paris] PHP   3. require() D:\work-dir\console-options\vendor\phpstan\phpstan\phpstan:8
[29-Sep-2022 17:30:33 Europe/Paris] PHP   4. _PHPStan_3bfe2e67c\{closure:phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:13-125}() phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:125
[29-Sep-2022 17:30:33 Europe/Paris] PHP   5. _PHPStan_3bfe2e67c\Symfony\Component\Console\Application->run($input = *uninitialized*, $output = *uninitialized*) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/bin/phpstan:124
[29-Sep-2022 17:30:33 Europe/Paris] PHP   6. _PHPStan_3bfe2e67c\Symfony\Component\Console\Application->doRun($input = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput { protected $definition = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputDefinition { private $arguments = [...]; private $requiredCount = 1; private $lastArrayArgument = NULL; private $lastOptionalArgument = NULL; private $options = [...]; private $negations = [...]; private $shortcuts = [...] }; protected $stream = NULL; protected $options = []; protected $arguments = ['command' => 'analyze']; protected $interactive = FALSE; private $tokens = [0 => 'analyze', 1 => '-c', 2 => 'D:/work-dir/console-options/phpstan.neon', 3 => '--memory-limit=2G', 4 => '--error-format=checkstyle', 5 => '--no-progress', 6 => '--no-ansi', 7 => '--no-interaction', 8 => 'C:/Users/fabien.sanchez/AppData/Local/Temp/PHPStantemp_folder27385/test/OptionTest.php']; private $parsed = [0 => 'D:/work-dir/console-options/phpstan.neon', 1 => '--memory-limit=2G', 2 => '--error-format=checkstyle', 3 => '--no-progress', 4 => '--no-ansi', 5 => '--no-interaction', 6 => 'C:/Users/fabien.sanchez/AppData/Local/Temp/PHPStantemp_folder27385/test/OptionTest.php'] }, $output = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Output\ConsoleOutput { private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}verbosity = 32; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}formatter = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatter { private $decorated = FALSE; private $styles = [...]; private $styleStack = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatterStyleStack { ... } }; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\StreamOutput}stream = resource(2) of type (stream); private $stderr = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Output\StreamOutput { private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}verbosity = 32; private ${_PHPStan_3bfe2e67c\Symfony\Component\Console\Output\Output}formatter = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Formatter\OutputFormatter { ... }; private $stream = resource(3) of type (stream) }; private $consoleSectionOutputs = [] }) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Application.php:157
[29-Sep-2022 17:30:33 Europe/Paris] PHP   7. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\Input->bind($definition = class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputDefinition { private $arguments = ['command' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputArgument { ... }]; private $requiredCount = 1; private $lastArrayArgument = NULL; private $lastOptionalArgument = NULL; private $options = ['help' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'quiet' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'verbose' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'version' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'ansi' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }, 'no-interaction' => class _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\InputOption { ... }]; private $negations = ['no-ansi' => 'ansi']; private $shortcuts = ['h' => 'help', 'q' => 'quiet', 'v' => 'verbose', 'vv' => 'verbose', 'vvv' => 'verbose', 'V' => 'version', 'n' => 'no-interaction'] }) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Application.php:208
[29-Sep-2022 17:30:33 Europe/Paris] PHP   8. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parse() phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/Input.php:50
[29-Sep-2022 17:30:33 Europe/Paris] PHP   9. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parseToken($token = '-c', $parseOptions = TRUE) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:63
[29-Sep-2022 17:30:33 Europe/Paris] PHP  10. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->parseShortOption($token = '-c') phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:75
[29-Sep-2022 17:30:33 Europe/Paris] PHP  11. _PHPStan_3bfe2e67c\Symfony\Component\Console\Input\ArgvInput->addShortOption($shortcut = 'c', $value = NULL) phar://D:/work-dir/console-options/vendor/phpstan/phpstan/phpstan.phar/vendor/symfony/console/Input/ArgvInput.php:95
[29-Sep-2022 17:32:04 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:32:04 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:32:04 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcbf:0
[29-Sep-2022 17:32:04 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcbf:120
[29-Sep-2022 17:32:04 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCBF() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcbf:18
[29-Sep-2022 17:32:04 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->init() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:176
[29-Sep-2022 17:32:04 Europe/Paris] PHP   5. PHP_CodeSniffer\Ruleset->__construct($config = class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 75, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => TRUE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = TRUE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:332
[29-Sep-2022 17:32:04 Europe/Paris] PHP   6. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:218
[29-Sep-2022 17:32:04 Europe/Paris] PHP   7. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:32:04 Europe/Paris] PHP   8. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'function abc(...);') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:32:04 Europe/Paris] PHP   9. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:32:04 Europe/Paris] PHP  10. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:32:04 Europe/Paris] PHP  11. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:32:04 Europe/Paris] PHP  12. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:32:04 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:32:04 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:32:04 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcbf:0
[29-Sep-2022 17:32:04 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcbf:120
[29-Sep-2022 17:32:04 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCBF() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcbf:18
[29-Sep-2022 17:32:04 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->init() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:176
[29-Sep-2022 17:32:04 Europe/Paris] PHP   5. PHP_CodeSniffer\Ruleset->__construct($config = class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 75, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => TRUE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = TRUE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:332
[29-Sep-2022 17:32:04 Europe/Paris] PHP   6. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:218
[29-Sep-2022 17:32:04 Europe/Paris] PHP   7. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:32:04 Europe/Paris] PHP   8. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'function abc(...)') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:32:04 Europe/Paris] PHP   9. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:32:04 Europe/Paris] PHP  10. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:32:04 Europe/Paris] PHP  11. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:32:04 Europe/Paris] PHP  12. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:32:04 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:32:04 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:32:04 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcbf:0
[29-Sep-2022 17:32:04 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcbf:120
[29-Sep-2022 17:32:04 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCBF() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcbf:18
[29-Sep-2022 17:32:04 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->init() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:176
[29-Sep-2022 17:32:04 Europe/Paris] PHP   5. PHP_CodeSniffer\Ruleset->__construct($config = class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 75, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => TRUE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = TRUE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:332
[29-Sep-2022 17:32:04 Europe/Paris] PHP   6. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:218
[29-Sep-2022 17:32:04 Europe/Paris] PHP   7. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:32:04 Europe/Paris] PHP   8. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'abstract function abc(...);') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:32:04 Europe/Paris] PHP   9. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:32:04 Europe/Paris] PHP  10. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:32:04 Europe/Paris] PHP  11. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:32:04 Europe/Paris] PHP  12. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:32:04 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:32:04 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:32:04 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcs:0
[29-Sep-2022 17:32:04 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcs:120
[29-Sep-2022 17:32:04 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCS() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcs:18
[29-Sep-2022 17:32:04 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->init() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:70
[29-Sep-2022 17:32:04 Europe/Paris] PHP   5. PHP_CodeSniffer\Ruleset->__construct($config = class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 75, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => TRUE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = TRUE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:332
[29-Sep-2022 17:32:04 Europe/Paris] PHP   6. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:218
[29-Sep-2022 17:32:04 Europe/Paris] PHP   7. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:32:04 Europe/Paris] PHP   8. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'function abc(...);') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:32:04 Europe/Paris] PHP   9. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:32:04 Europe/Paris] PHP  10. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:32:04 Europe/Paris] PHP  11. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:32:04 Europe/Paris] PHP  12. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:32:04 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:32:04 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:32:04 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcs:0
[29-Sep-2022 17:32:04 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcs:120
[29-Sep-2022 17:32:04 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCS() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcs:18
[29-Sep-2022 17:32:04 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->init() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:70
[29-Sep-2022 17:32:04 Europe/Paris] PHP   5. PHP_CodeSniffer\Ruleset->__construct($config = class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 75, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => TRUE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = TRUE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:332
[29-Sep-2022 17:32:04 Europe/Paris] PHP   6. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:218
[29-Sep-2022 17:32:04 Europe/Paris] PHP   7. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:32:04 Europe/Paris] PHP   8. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'function abc(...)') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:32:04 Europe/Paris] PHP   9. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:32:04 Europe/Paris] PHP  10. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:32:04 Europe/Paris] PHP  11. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:32:04 Europe/Paris] PHP  12. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:32:04 Europe/Paris] PHP ParseError:  Unclosed '(' in  on line 1
[29-Sep-2022 17:32:04 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:32:04 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpcs:0
[29-Sep-2022 17:32:04 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpcs:120
[29-Sep-2022 17:32:04 Europe/Paris] PHP   3. PHP_CodeSniffer\Runner->runPHPCS() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\bin\phpcs:18
[29-Sep-2022 17:32:04 Europe/Paris] PHP   4. PHP_CodeSniffer\Runner->init() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:70
[29-Sep-2022 17:32:04 Europe/Paris] PHP   5. PHP_CodeSniffer\Ruleset->__construct($config = class PHP_CodeSniffer\Config { private $settings = ['files' => [...], 'standards' => [...], 'verbosity' => 0, 'interactive' => FALSE, 'parallel' => 75, 'cache' => FALSE, 'cacheFile' => NULL, 'colors' => TRUE, 'explain' => FALSE, 'local' => FALSE, 'showSources' => FALSE, 'showProgress' => TRUE, 'quiet' => FALSE, 'annotations' => TRUE, 'tabWidth' => 4, 'encoding' => 'utf-8', 'extensions' => [...], 'sniffs' => [...], 'exclude' => [...], 'ignored' => [...], 'reportFile' => NULL, 'generator' => NULL, 'filter' => NULL, 'bootstrap' => [...], 'reports' => [...], 'basepath' => NULL, 'reportWidth' => 0, 'errorSeverity' => 5, 'warningSeverity' => 0, 'recordErrors' => TRUE, 'suffix' => '', 'stdin' => FALSE, 'stdinContent' => NULL, 'stdinPath' => NULL, 'unknown' => [...]]; public $dieOnUnknownArg = TRUE; private $cliArgs = [0 => '--colors', 1 => '--parallel=75', 2 => '-np', 3 => 'src', 4 => 'test'] }) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Runner.php:332
[29-Sep-2022 17:32:04 Europe/Paris] PHP   6. PHP_CodeSniffer\Ruleset->populateTokenListeners() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:218
[29-Sep-2022 17:32:04 Europe/Paris] PHP   7. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->register() D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Ruleset.php:1231
[29-Sep-2022 17:32:04 Europe/Paris] PHP   8. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->parse($pattern = 'abstract function abc(...);') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:90
[29-Sep-2022 17:32:04 Europe/Paris] PHP   9. PHP_CodeSniffer\Sniffs\AbstractPatternSniff->createTokenPattern($str = '(') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:824
[29-Sep-2022 17:32:04 Europe/Paris] PHP  10. PHP_CodeSniffer\Tokenizers\Tokenizer->__construct($content = '<?php (?>', $config = NULL, $eolChar = *uninitialized*) D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Sniffs\AbstractPatternSniff.php:916
[29-Sep-2022 17:32:04 Europe/Paris] PHP  11. PHP_CodeSniffer\Tokenizers\PHP->tokenize($string = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\Tokenizer.php:90
[29-Sep-2022 17:32:04 Europe/Paris] PHP  12. token_get_all($code = '<?php (?>') D:\work-dir\console-options\vendor\squizlabs\php_codesniffer\src\Tokenizers\PHP.php:522
[29-Sep-2022 17:32:18 Europe/Paris] Xdebug: [Config] The setting 'xdebug.default_enable' has been renamed, see the upgrading guide at https://xdebug.org/docs/upgrade_guide#changed-xdebug.default_enable (See: https://xdebug.org/docs/errors#CFG-C-CHANGED)
[29-Sep-2022 17:32:18 Europe/Paris] Xdebug: [Config] The setting 'xdebug.remote_enable' has been renamed, see the upgrading guide at https://xdebug.org/docs/upgrade_guide#changed-xdebug.remote_enable (See: https://xdebug.org/docs/errors#CFG-C-CHANGED)
[29-Sep-2022 17:32:18 Europe/Paris] Xdebug: [Config] The setting 'xdebug.remote_autostart' has been renamed, see the upgrading guide at https://xdebug.org/docs/upgrade_guide#changed-xdebug.remote_autostart (See: https://xdebug.org/docs/errors#CFG-C-CHANGED)
[29-Sep-2022 17:32:18 Europe/Paris] Xdebug: [Config] The setting 'xdebug.remote_connect_back' has been renamed, see the upgrading guide at https://xdebug.org/docs/upgrade_guide#changed-xdebug.remote_connect_back (See: https://xdebug.org/docs/errors#CFG-C-CHANGED)
[29-Sep-2022 17:32:18 Europe/Paris] Xdebug: [Config] The setting 'xdebug.remote_port' has been renamed, see the upgrading guide at https://xdebug.org/docs/upgrade_guide#changed-xdebug.remote_port (See: https://xdebug.org/docs/errors#CFG-C-CHANGED)
[29-Sep-2022 17:32:18 Europe/Paris] Xdebug: [Config] The setting 'xdebug.default_enable' has been renamed, see the upgrading guide at https://xdebug.org/docs/upgrade_guide#changed-xdebug.default_enable (See: https://xdebug.org/docs/errors#CFG-C-CHANGED)
[29-Sep-2022 17:32:18 Europe/Paris] Xdebug: [Config] The setting 'xdebug.remote_enable' has been renamed, see the upgrading guide at https://xdebug.org/docs/upgrade_guide#changed-xdebug.remote_enable (See: https://xdebug.org/docs/errors#CFG-C-CHANGED)
[29-Sep-2022 17:32:18 Europe/Paris] Xdebug: [Config] The setting 'xdebug.remote_autostart' has been renamed, see the upgrading guide at https://xdebug.org/docs/upgrade_guide#changed-xdebug.remote_autostart (See: https://xdebug.org/docs/errors#CFG-C-CHANGED)
[29-Sep-2022 17:32:18 Europe/Paris] Xdebug: [Config] The setting 'xdebug.remote_connect_back' has been renamed, see the upgrading guide at https://xdebug.org/docs/upgrade_guide#changed-xdebug.remote_connect_back (See: https://xdebug.org/docs/errors#CFG-C-CHANGED)
[29-Sep-2022 17:32:18 Europe/Paris] Xdebug: [Config] The setting 'xdebug.remote_port' has been renamed, see the upgrading guide at https://xdebug.org/docs/upgrade_guide#changed-xdebug.remote_port (See: https://xdebug.org/docs/errors#CFG-C-CHANGED)
[29-Sep-2022 17:32:18 Europe/Paris] PHP LogicException:  l'option config n'a pas été initialisée. in D:\work-dir\console-options\src\OptionParser.php on line 98
[29-Sep-2022 17:32:18 Europe/Paris] PHP Stack trace:
[29-Sep-2022 17:32:18 Europe/Paris] PHP   1. {main}() D:\work-dir\console-options\vendor\bin\phpunit:0
[29-Sep-2022 17:32:18 Europe/Paris] PHP   2. include() D:\work-dir\console-options\vendor\bin\phpunit:123
[29-Sep-2022 17:32:18 Europe/Paris] PHP   3. PHPUnit\TextUI\Command::main($exit = *uninitialized*) D:\work-dir\console-options\vendor\phpunit\phpunit\phpunit:98
[29-Sep-2022 17:32:18 Europe/Paris] PHP   4. PHPUnit\TextUI\Command->run($argv = [0 => 'D:\\work-dir\\console-options\\vendor\\bin\\/phpunit'], $exit = TRUE) D:\work-dir\console-options\vendor\phpunit\phpunit\src\TextUI\Command.php:97
[29-Sep-2022 17:32:18 Europe/Paris] PHP   5. PHPUnit\TextUI\TestRunner->run($suite = class PHPUnit\Framework\TestSuite { protected $backupGlobals = NULL; protected $backupStaticAttributes = NULL; protected $runTestInSeparateProcess = FALSE; protected $name = ''; protected $groups = ['default' => [...]]; protected $tests = [0 => class PHPUnit\Framework\TestSuite { ... }]; protected $numTests = 5; protected $testCase = FALSE; protected $foundClasses = []; protected $providedTests = NULL; protected $requiredTests = NULL; private $beStrictAboutChangesToGlobalState = NULL; private $iteratorFilter = NULL; private $declaredClassesPointer = 233; private $warnings = [] }, $arguments = ['extensions' => [], 'listGroups' => FALSE, 'listSuites' => FALSE, 'listTests' => FALSE, 'listTestsXml' => FALSE, 'loader' => NULL, 'useDefaultConfiguration' => TRUE, 'loadedExtensions' => [], 'unavailableExtensions' => [], 'notLoadedExtensions' => [], 'testSuffixes' => [0 => 'Test.php', 1 => '.phpt'], 'configuration' => 'D:\\work-dir\\console-options\\phpunit.xml', 'configurationObject' => class PHPUnit\TextUI\XmlConfiguration\Configuration { private $filename = 'D:\\work-dir\\console-options\\phpunit.xml'; private $validationResult = class PHPUnit\Util\Xml\ValidationResult { ... }; private $extensions = class PHPUnit\TextUI\XmlConfiguration\ExtensionCollection { ... }; private $codeCoverage = class PHPUnit\TextUI\XmlConfiguration\CodeCoverage\CodeCoverage { ... }; private $groups = class PHPUnit\TextUI\XmlConfiguration\Groups { ... }; private $testdoxGroups = class PHPUnit\TextUI\XmlConfiguration\Groups { ... }; private $listeners = class PHPUnit\TextUI\XmlConfiguration\ExtensionCollection { ... }; private $logging = class PHPUnit\TextUI\XmlConfiguration\Logging\Logging { ... }; private $php = class PHPUnit\TextUI\XmlConfiguration\Php { ... }; private $phpunit = class PHPUnit\TextUI\XmlConfiguration\PHPUnit { ... }; private $testSuite = class PHPUnit\TextUI\XmlConfiguration\TestSuiteCollection { ... } }, 'stderr' => FALSE, 'columns' => 80], $warnings = [], $exit = TRUE) D:\work-dir\console-options\vendor\phpunit\phpunit\src\TextUI\Command.php:144
[29-Sep-2022 17:32:18 Europe/Paris] PHP   6. PHPUnit\Framework\TestSuite->run($result = class PHPUnit\Framework\TestResult { private $passed = ['Console\Options\OptionParserTest::testPaseSimpleOption' => [...], 'Console\Options\OptionParserTest::testParseWithDefault' => [...], 'Console\Options\OptionParserTest::testOptionIsSet' => [...]]; private $passedTestClasses = []; private $currentTestSuiteFailed = FALSE; private $errors = []; private $failures = []; private $warnings = []; private $notImplemented = []; private $risky = []; private $skipped = []; private $listeners = [0 => class PHPUnit\Runner\TestListenerAdapter { ... }, 1 => class PHPUnit\TextUI\DefaultResultPrinter { ... }]; private $runTests = 4; private $time = 0.0086449; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = TRUE; private $beStrictAboutTodoAnnotatedTests = TRUE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }) D:\work-dir\console-options\vendor\phpunit\phpunit\src\TextUI\TestRunner.php:673
[29-Sep-2022 17:32:18 Europe/Paris] PHP   7. PHPUnit\Framework\TestSuite->run($result = class PHPUnit\Framework\TestResult { private $passed = ['Console\Options\OptionParserTest::testPaseSimpleOption' => [...], 'Console\Options\OptionParserTest::testParseWithDefault' => [...], 'Console\Options\OptionParserTest::testOptionIsSet' => [...]]; private $passedTestClasses = []; private $currentTestSuiteFailed = FALSE; private $errors = []; private $failures = []; private $warnings = []; private $notImplemented = []; private $risky = []; private $skipped = []; private $listeners = [0 => class PHPUnit\Runner\TestListenerAdapter { ... }, 1 => class PHPUnit\TextUI\DefaultResultPrinter { ... }]; private $runTests = 4; private $time = 0.0086449; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = TRUE; private $beStrictAboutTodoAnnotatedTests = TRUE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }) D:\work-dir\console-options\vendor\phpunit\phpunit\src\Framework\TestSuite.php:673
[29-Sep-2022 17:32:18 Europe/Paris] PHP   8. PHPUnit\Framework\TestSuite->run($result = class PHPUnit\Framework\TestResult { private $passed = ['Console\Options\OptionParserTest::testPaseSimpleOption' => [...], 'Console\Options\OptionParserTest::testParseWithDefault' => [...], 'Console\Options\OptionParserTest::testOptionIsSet' => [...]]; private $passedTestClasses = []; private $currentTestSuiteFailed = FALSE; private $errors = []; private $failures = []; private $warnings = []; private $notImplemented = []; private $risky = []; private $skipped = []; private $listeners = [0 => class PHPUnit\Runner\TestListenerAdapter { ... }, 1 => class PHPUnit\TextUI\DefaultResultPrinter { ... }]; private $runTests = 4; private $time = 0.0086449; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = TRUE; private $beStrictAboutTodoAnnotatedTests = TRUE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }) D:\work-dir\console-options\vendor\phpunit\phpunit\src\Framework\TestSuite.php:673
[29-Sep-2022 17:32:18 Europe/Paris] PHP   9. PHPUnit\Framework\TestCase->run($result = class PHPUnit\Framework\TestResult { private $passed = ['Console\Options\OptionParserTest::testPaseSimpleOption' => [...], 'Console\Options\OptionParserTest::testParseWithDefault' => [...], 'Console\Options\OptionParserTest::testOptionIsSet' => [...]]; private $passedTestClasses = []; private $currentTestSuiteFailed = FALSE; private $errors = []; private $failures = []; private $warnings = []; private $notImplemented = []; private $risky = []; private $skipped = []; private $listeners = [0 => class PHPUnit\Runner\TestListenerAdapter { ... }, 1 => class PHPUnit\TextUI\DefaultResultPrinter { ... }]; private $runTests = 4; private $time = 0.0086449; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = TRUE; private $beStrictAboutTodoAnnotatedTests = TRUE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }) D:\work-dir\console-options\vendor\phpunit\phpunit\src\Framework\TestSuite.php:673
[29-Sep-2022 17:32:18 Europe/Paris] PHP  10. PHPUnit\Framework\TestResult->run($test = class Console\Options\OptionParserTest { protected $backupGlobals = NULL; protected $backupGlobalsExcludeList = []; protected $backupGlobalsBlacklist = []; protected $backupStaticAttributes = NULL; protected $backupStaticAttributesExcludeList = []; protected $backupStaticAttributesBlacklist = []; protected $runTestInSeparateProcess = FALSE; protected $preserveGlobalState = TRUE; protected $providedTests = [0 => class PHPUnit\Framework\ExecutionOrderDependency { ... }]; private ${PHPUnit\Framework\TestCase}runClassInSeparateProcess = NULL; private ${PHPUnit\Framework\TestCase}inIsolation = FALSE; private ${PHPUnit\Framework\TestCase}data = []; private ${PHPUnit\Framework\TestCase}dataName = ''; private ${PHPUnit\Framework\TestCase}expectedException = 'LogicException'; private ${PHPUnit\Framework\TestCase}expectedExceptionMessage = NULL; private ${PHPUnit\Framework\TestCase}expectedExceptionMessageRegExp = NULL; private ${PHPUnit\Framework\TestCase}expectedExceptionCode = NULL; private ${PHPUnit\Framework\TestCase}name = 'testOptionIsRequired'; private ${PHPUnit\Framework\TestCase}dependencies = []; private ${PHPUnit\Framework\TestCase}dependencyInput = []; private ${PHPUnit\Framework\TestCase}iniSettings = []; private ${PHPUnit\Framework\TestCase}locale = []; private ${PHPUnit\Framework\TestCase}mockObjects = []; private ${PHPUnit\Framework\TestCase}mockObjectGenerator = NULL; private ${PHPUnit\Framework\TestCase}status = -1; private ${PHPUnit\Framework\TestCase}statusMessage = ''; private ${PHPUnit\Framework\TestCase}numAssertions = 0; private ${PHPUnit\Framework\TestCase}result = class PHPUnit\Framework\TestResult { private $passed = [...]; private $passedTestClasses = [...]; private $currentTestSuiteFailed = FALSE; private $errors = [...]; private $failures = [...]; private $warnings = [...]; private $notImplemented = [...]; private $risky = [...]; private $skipped = [...]; private $listeners = [...]; private $runTests = 4; private $time = 0.0086449; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = TRUE; private $beStrictAboutTodoAnnotatedTests = TRUE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }; private ${PHPUnit\Framework\TestCase}testResult = NULL; private ${PHPUnit\Framework\TestCase}output = ''; private ${PHPUnit\Framework\TestCase}outputExpectedRegex = NULL; private ${PHPUnit\Framework\TestCase}outputExpectedString = NULL; private ${PHPUnit\Framework\TestCase}outputCallback = FALSE; private ${PHPUnit\Framework\TestCase}outputBufferingActive = TRUE; private ${PHPUnit\Framework\TestCase}outputBufferingLevel = 1; private ${PHPUnit\Framework\TestCase}outputRetrievedForAssertion = FALSE; private ${PHPUnit\Framework\TestCase}snapshot = NULL; private ${PHPUnit\Framework\TestCase}prophet = NULL; private ${PHPUnit\Framework\TestCase}beStrictAboutChangesToGlobalState = NULL; private ${PHPUnit\Framework\TestCase}registerMockObjectsFromTestArgumentsRecursively = FALSE; private ${PHPUnit\Framework\TestCase}warnings = []; private ${PHPUnit\Framework\TestCase}groups = [0 => 'default']; private ${PHPUnit\Framework\TestCase}doesNotPerformAssertions = FALSE; private ${PHPUnit\Framework\TestCase}customComparators = []; private ${PHPUnit\Framework\TestCase}doubledTypes = [] }) D:\work-dir\console-options\vendor\phpunit\phpunit\src\Framework\TestCase.php:904
[29-Sep-2022 17:32:18 Europe/Paris] PHP  11. PHPUnit\Framework\TestCase->runBare() D:\work-dir\console-options\vendor\phpunit\phpunit\src\Framework\TestResult.php:728
[29-Sep-2022 17:32:18 Europe/Paris] PHP  12. PHPUnit\Framework\TestCase->runTest() D:\work-dir\console-options\vendor\phpunit\phpunit\src\Framework\TestCase.php:1154
[29-Sep-2022 17:32:18 Europe/Paris] PHP  13. Console\Options\OptionParserTest->testOptionIsRequired() D:\work-dir\console-options\vendor\phpunit\phpunit\src\Framework\TestCase.php:1548
[29-Sep-2022 17:32:18 Europe/Paris] PHP  14. Console\Options\OptionParser->parse($argv = [0 => 'script.php', 1 => './confog.json']) D:\work-dir\console-options\test\OptionParserTest.php:58
[29-Sep-2022 17:32:18 Europe/Paris] PHP  15. Console\Options\OptionParser->testRequired() D:\work-dir\console-options\src\OptionParser.php:87
